;\n  margin-bottom: 10px;\n}\n\n.label-info {\n  display: block;\n  margin-bottom: 10px;\n}\n\nh1, .h1,\nh2, .h2,\nh3, .h3,\nh4, .h4,\nh5, .h5,\nh6, .h6 {\n  margin: 0 0 calc($gutter / 4);\n\n  @media (--medium-up) {\n    margin: 0 0 calc($gutter / 2);\n  }\n\n  & a {\n    text-decoration: none;\n    font-weight: inherit;\n  }\n}\n\nh1, .h1,\n.section-header__title {\n  @mixin header-size 1;\n}\n\n/*h2 does not use header font stack*/\nh2, .h2 {\n  @mixin header-size 0.66;\n}\n\nh3, .h3 {\n  @mixin header-size 0.57;\n}\n\nh4, .h4 {\n  @mixin header-size 0.45;\n}\n\nh5, .h5,\nh6, .h6 {\n  @mixin header-size 0.4;\n}\n\n.subheading {\n  font-size: calc(var(--typeBaseSize) - 3px);\n  letter-spacing: 0.25em;\n  text-transform: uppercase;\n  margin-bottom: 15px;\n\n  @media (--medium-up) {\n    font-size: calc(var(--typeBaseSize) - 5px);\n    margin-bottom: 15px;\n  }\n}\n\n.text-spacing {\n  margin-bottom: calc($gutter / 2);\n}\n\n/*================ Rich Text Editor Styles ================*/\n.rte {\n  & table {\n    @media (--small) {\n      & td,\n      & th {\n        padding: 6px 8px;\n      }\n    }\n\n    @nest .collapsible-content & {\n      & td,\n      & th {\n        padding: 6px 8px;\n      }\n    }\n  }\n}\n\n.comment {\n  border-bottom: 1px solid;\n  border-bottom-color: $colorBorder;\n  padding-bottom: $gutter;\n  margin-bottom: $gutter;\n\n  &:last-child {\n    border-bottom: 0;\n  }\n}\n\n.comment__date {\n  @mixin smallestFontSize;\n  margin-top: 3px;\n\n  @media (--small) {\n    margin-bottom: calc($gutter / 2)\n  }\n}\n\n/*================ Misc typography ================*/\n.skrim__title {\n  @mixin header-size 0.57;\n}\n\n.enlarge-text {\n  @mixin largestFontSize;\n}\n\n.rte {\n  & .enlarge-text {\n    margin: 0;\n\n    & p {\n\n      &:last-child {\n        margin-bottom: 0;\n      }\n    }\n  }\n}\n\n/*================ RTL overrides ================*/\nhtml[dir=\"rtl\"] {\n  & .text-left {\n    text-align: right !important;\n  }\n\n  & .text-right {\n    text-align: left !important;\n  }\n}\n\n/*Icon + text element that prevents awkward line wrapping*/\n.icon-and-text {\n  display: flex;\n  flex-wrap: nowrap;\n  align-items: center;\n\n  & .icon {\n    flex: 0 0 auto;\n  }\n}\n","ul, ol {\n  margin: 0 0 calc($gutter / 2) $gutter;\n  padding: 0;\n  text-rendering: optimizeLegibility;\n}\n\nol ol {\n  list-style: lower-alpha;\n}\n\nol { list-style: decimal; }\nul ul, ul ol,\nol ol, ol ul { margin: 4px 0 5px 20px; }\nli { margin-bottom: 0.25em; }\n\nul.square { list-style: square outside; }\nul.disc { list-style: disc outside; }\nol.alpha { list-style: lower-alpha outside; }\n\n.no-bullets {\n  list-style: none outside;\n  margin-left: 0;\n}\n\n.inline-list {\n  padding: 0;\n  margin: 0;\n\n  & li {\n    display: inline-block;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n}\n","table {\n  width: 100%;\n  border-spacing: 1px;\n  position: relative;\n  border: 0 none;\n  background: $colorBorder;\n}\n\n.table-wrapper {\n  max-width: 100%;\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\ntd,\nth {\n  border: 0 none;\n  text-align: left;\n  padding: 10px 15px;\n  background: $colorBody;\n\n  @nest html[dir=\"rtl\"] & {\n    text-align: right;\n  }\n}\n\nth {\n  font-weight: bold;\n}\n\nth,\n.table__title {\n  font-weight: bold;\n}\n","a,\n.text-link {\n  color: inherit;\n  text-decoration: none;\n  background: transparent;\n\n  &:hover {\n    color: inherit;\n  }\n}\n\n.text-link {\n  display: inline;\n  border: 0 none;\n  background: none;\n  padding: 0;\n  margin: 0;\n  font-size: inherit;\n}\n\n.rte a:not(.btn),\n.shopify-policy__container a:not(.btn),\n.shopify-email-marketing-confirmation__container a:not(.btn) {\n  color: $colorLink;\n}\n\n.customers {\n  & a:not(.rte__image) {\n    text-decoration: none;\n    border-bottom: $borderWidth solid;\n    border-bottom-color: var(--colorTextBodyAlpha01);\n    position: relative;\n  }\n\n  @nest [data-animate_underlines=\"true\"] & {\n    & a:not(.btn):after {\n      content: '';\n      position: absolute;\n      bottom: -$borderWidth;\n      left: 0;\n      width: 0;\n      border-bottom: $borderWidth solid currentColor;\n      transition: width $animate_underlines_duration ease;\n    }\n\n    & a:not(.btn) {\n      &:hover:after,\n      &:focus:after {\n        width: 100%;\n      }\n    }\n  }\n}\n\n.rte {\n  & a:not(.rte__image):not(.btn) {\n    color: currentColor;\n    text-decoration: underline;\n    text-underline-offset: 5px;\n    text-decoration-thickness: 2px;\n  }\n\n  & a.rte__image:after {\n    content: none;\n  }\n}\n","button {\n  color: currentColor;\n  overflow: visible;\n}\n\nbutton[disabled],\nhtml input[disabled] {\n  cursor: default;\n}\n\n.btn,\n.rte .btn,\n.shopify-payment-button .shopify-payment-button__button--unbranded {\n  @mixin buttonFontStack;\n  display: inline-block;\n  padding: $btnPrimaryPadding;\n  margin: 0;\n  width: auto;\n  min-width: 90px;\n  line-height: 1.42;\n  text-decoration: none;\n  text-align: center;\n  vertical-align: middle;\n  white-space: normal;\n  cursor: pointer;\n  border: $borderWidth solid transparent;\n  user-select: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  border-radius: var(--buttonRadius);\n  color: $colorBtnPrimaryText;\n  background: $colorBtnPrimary;\n  transition: $colorBtnPrimaryBgTransition;\n\n  @media (--small) {\n    padding: $btnPrimaryPaddingSmall;\n  }\n\n  &:hover {\n    color: $colorBtnPrimaryText;\n    background-color: $colorBtnPrimary;\n  }\n\n  &:active {\n    background-color: $colorBtnPrimaryActive;\n  }\n\n  &[disabled],\n  &.disabled {\n    cursor: default;\n    color: $disabledText;\n    background-color: $disabledGrey;\n    transition: none;\n\n    &:hover {\n      color: $disabledText;\n      background-color: $disabledGrey;\n    }\n  }\n\n  /*Padding variation when caps enabled*/\n  @nest [data-button_type_style=\"caps\"] & {\n    padding: $btnPrimaryPaddingCaps;\n\n    @media (--small) {\n      padding: $btnPrimaryPaddingSmallCaps;\n    }\n  }\n}\n\n/*Mimic the .btn hover style for Shopify Payment Button*/\n.shopify-payment-button .shopify-payment-button__button--unbranded:hover:not([disabled]) {\n  color: $colorBtnPrimaryText;\n  background-color: $colorBtnPrimary;\n}\n\n/*Match rounded corners on branded buttons*/\n.shopify-payment-button .shopify-payment-button__button--branded {\n  border-radius: var(--buttonRadius);\n\n  @nest [data-button_style^=\"round\"] & {\n    overflow: hidden;\n  }\n}\n\n/*Match additional cart button styles to theme*/\n.additional-checkout-buttons div[role=\"button\"] {\n  border-radius: var(--buttonRadius) !important;\n}\n\n/*More payment options button color*/\n.shopify-payment-button__more-options {\n  color: inherit;\n}\n\n.btn--secondary,\n.rte .btn--secondary {\n  color: $colorBtnPrimary;\n  background: $colorBtnPrimaryText;\n\n  &:hover {\n    color: $colorBtnPrimary;\n    background-color: $colorBtnPrimaryText;\n  }\n}\n\n.btn--tertiary,\n.rte .btn--tertiary {\n  background-color: $colorBody;\n  border: $borderWidth solid;\n  border-color: $colorTextBody;\n  color: $colorTextBody;\n  font-weight: normal;\n\n  &:hover {\n    background-color: $colorBody;\n    color: $colorTextBody;\n  }\n\n  &[disabled],\n  &.disabled {\n    cursor: default;\n    color: $disabledText;\n    background-color: $disabledGrey;\n  }\n\n  &:active {\n    color: $colorTextBody;\n    background: $colorBody;\n  }\n\n  @nest [data-button_style=\"shadow\"] & {\n    box-shadow: 5px 5px 0 0 $colorTextBody;\n    transition: transform 0.05s, box-shadow 0.05s;\n    margin-bottom: 5px;\n\n    &:active {\n      transform: translate(4px, 4px);\n      box-shadow: 1px 1px 0 0 $colorTextBody;\n    }\n\n    &.btn--full {\n      width: calc(100% - 5px);\n\n      @media (--small) {\n        @nest .small--text-center & {\n          transform: translateX(-2.5px);\n        }\n      }\n    }\n  }\n}\n\n/*================ Button variations ================*/\n.btn--small {\n  @mixin smallFontSize;\n  padding: $btnSmallPadding;\n  background-position: 150% 45%;\n  min-width: 90px;\n\n  @media (--small) {\n    padding: $btnSmallPaddingSmall;\n  }\n}\n\n.btn--large {\n  padding: 15px 20px;\n}\n\n.btn--full {\n  width: 100%;\n}\n\n.btn--inverse {\n  background: $colorHeroText;\n  background-color: transparent;\n  border: 2px solid;\n  border-color: $colorHeroText;\n\n  &:hover {\n    color: $colorHeroText;\n    background-color: transparent;\n  }\n}\n\n[data-button_style=\"shadow\"] .btn--inverse {\n  box-shadow: 5px 5px 0 0 $colorHeroText;\n  transition: transform 0.05s, box-shadow 0.05s;\n\n  &:active {\n    transform: translate(4px, 4px);\n    box-shadow: 1px 1px 0 0 $colorHeroText;\n  }\n}\n\n/*================ Button loading indicator - requires child span ================*/\n.btn--loading {\n  position: relative;\n\n  /*Loading text and animation*/\n  & span:after {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    animation: pulse-fade 0.3s infinite linear;\n  }\n\n  /*Add to cart and loading text colors*/\n  & span {\n    color: $colorBtnPrimary;\n\n    &:after {\n      color: $colorBody;\n    }\n  }\n\n  &.btn--tertiary span {\n    color: $colorBody;\n\n    &:after {\n      color: $colorTextBody;\n    }\n  }\n}\n\n/*================ Collapsible trigger ================*/\n.collapsible-trigger-btn {\n  display: block;\n  width: 100%;\n  text-align: left;\n  margin: 0;\n  padding: calc($gutter / 2) 0;\n\n  @media (--small) {\n    padding: calc($gutter / 2) 0;\n  }\n\n  /*One-off for the show more/less collection tag button*/\n  &.btn--tertiary {\n    padding: 6px 10px;\n    width: auto;\n  }\n}\n\n.collapsible-trigger-btn--borders {\n  border-top: $borderWidth solid;\n  border-top-color: $colorBorder;\n\n  &:first-child {\n    border-top: none;\n  }\n\n  @nest .collapsible-content + & {\n    margin-top: -$borderWidth;\n  }\n\n  & + .collapsible-content .collapsible-content__inner {\n    padding-bottom: calc($gutter / 2);\n  }\n}\n\n/*================ Collapsible trigger, tab style ================*/\n.collapsible-trigger--tab {\n  display: inline-block;\n  padding: 5px 0 2px;\n  margin: 0 10px 5px;\n\n  &:after {\n    content: '';\n    position: absolute;\n    bottom: -$borderWidth;\n    left: 0;\n    width: 0%;\n    border-bottom: $borderWidth solid currentColor;\n  }\n\n  &.is-open:after {\n    width: 100%;\n    transition: width $animate_underlines_duration ease;\n  }\n\n  @media (--medium-up) {\n    padding-left: 0;\n    padding-right: 0;\n    margin: 0 15px 5px 0;\n  }\n}\n\n/*================ Modal and screen layer close ================*/\n.btn--circle {\n  padding: 10px !important;\n  border-radius: 50%;\n  min-width: 0;\n\n  & .icon {\n    width: 26px;\n    height: 26px;\n  }\n\n  &.btn--large .icon {\n    width: 38px;\n    height: 38px;\n  }\n\n  @media (--small) {\n    &.btn--large {\n      padding: 15px;\n    }\n  }\n}\n\n/*============================================================================\n  Button styles when additional quick checkout buttons\n  are enabled on product page\n==============================================================================*/\n.shopify-payment-button__button--hidden {\n  display: none !important;\n}\n\n.shopify-payment-button {\n  margin-top: 10px;\n}\n\n.shopify-payment-button .shopify-payment-button__button--unbranded {\n  display: block;\n  width: 100%;\n  transition: none;\n}\n\n.payment-buttons {\n  & .add-to-cart,\n  & .shopify-payment-button,\n  & .shopify-payment-button__button--unbranded {\n    min-height: $btnMinHeightWhenQuickCheckout;\n\n    @nest [data-button_type_style=\"normal\"] & {\n      font-size: calc(var(--typeBaseSize) + 2px);\n    }\n  }\n\n  /*Force .btn--tertiary to have similar styles as .btn here*/\n  & .btn--tertiary {\n    padding: $btnPrimaryPadding;\n\n    @media (--small) {\n      padding: $btnPrimaryPaddingSmall;\n    }\n  }\n}\n","svg:not(:root) {\n  overflow: hidden;\n}\n\niframe {\n  max-width: 100%;\n}\n\n.image-wrap {\n  overflow: hidden;\n  animation: placeholder-shimmer 1.3s linear 2s infinite;\n  background-size: 400% 100%;\n  position: relative;\n\n  &.image-wrap--circular-image {\n    animation: placeholder-shimmer 1.3s linear 2s;\n  }\n\n  /*Added by `lazyloaded` event on parent of all `lazyload` imgs*/\n  &.loaded {\n    animation: none;\n  }\n}\n\n.image-wrap--transparent.loaded {\n  background: none;\n}\n\n/*Same image-wrap loading animation for skrim images*/\n.skrim__link {\n  animation: placeholder-shimmer 1.3s linear 2s infinite;\n  background-size: 400% 100%;\n\n  &.loaded {\n    animation: none;\n  }\n}\n\n.video-wrapper {\n  position: relative;\n  overflow: hidden;\n  max-width: 100%;\n  padding-bottom: 56.25%;\n  height: 0;\n  height: auto;\n\n  & iframe,\n  & video {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  }\n}\n\n.video-wrapper--modal {\n  width: 1000px;\n}\n\n.grid__image-ratio {\n  position: relative;\n\n  &:before {\n    content: '';\n    display: block;\n    height: 0;\n    width: 100%;\n  }\n\n  & .placeholder-svg {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n\n  & img:not([role=\"presentation\"]) {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n}\n\n.grid__image-ratio--wide:before {\n  padding-bottom: 56.25%;\n}\n\n.grid__image-ratio--landscape:before {\n  padding-bottom: 75%;\n}\n\n.grid__image-ratio--square:before {\n  padding-bottom: 100%;\n}\n\n.grid__image-ratio--portrait:before {\n  padding-bottom: 150%;\n}\n","form {\n  margin: 0;\n}\n\n.inline {\n  display: inline;\n}\n\n@media (--small) {\n  input,\n  textarea,\n  select,\n  .faux-select {\n    font-size: 16px !important;\n  }\n}\n\nbutton,\ninput,\ntextarea {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n\nbutton {\n  background: none;\n  border: none;\n  display: inline-block;\n  cursor: pointer;\n}\n\nfieldset {\n  border: $borderWidth solid;\n  border-color: $colorBorder;\n  padding: calc($gutter / 2);\n}\n\nlegend {\n  border: 0;\n  padding: 0;\n}\n\nbutton,\ninput[type=\"submit\"] {\n  cursor: pointer;\n}\n\ninput,\ntextarea,\nselect,\n.faux-select {\n  background-color: transparent;\n  color: inherit;\n  border: 0;\n  border-bottom: $borderWidth solid;\n  border-bottom-color: $colorBorder;\n  max-width: 100%;\n  padding: 8px 0;\n  border-radius: $input-radius;\n\n  &[disabled],\n  &.disabled {\n    cursor: default;\n    background-color: $disabledGrey;\n    border-bottom-color: transparent;\n  }\n\n  &:active,\n  &:focus {\n    border-bottom-color: $colorBorder;\n  }\n\n  &.input-full {\n    width: 100%;\n  }\n}\n\ntextarea {\n  min-height: 100px;\n}\n\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n  margin: 0 10px 0 0;\n  padding: 0;\n  width: auto;\n}\n\ninput[type=\"checkbox\"] {\n  -webkit-appearance: checkbox;\n  -moz-appearance: checkbox;\n}\n\ninput[type=\"radio\"] {\n  -webkit-appearance: radio;\n  -moz-appearance: radio;\n}\n\ninput[type=\"image\"] {\n  padding-left: 0;\n  padding-right: 0;\n  background-color: transparent;\n}\n\nselect,\n.faux-select {\n  appearance: none;\n  background-color: transparent;\n  display: inline-block;\n  vertical-align: middle;\n  padding-right: 28px;\n  text-indent: 0.01px;\n  text-overflow: '';\n  cursor: pointer;\n  color: inherit;\n}\n\nselect {\n  background-position: right center;\n  background-image: var(--urlIcoSelect);\n  background-repeat: no-repeat;\n  background-position: right 10px center;\n  background-size: 11px;\n}\n\n.faux-select .icon {\n  position: absolute;\n  right: 10px;\n  top: 50%;\n  transform: translateY(-50%);\n  width: 11px;\n  height: 11px;\n}\n\noptgroup {\n  font-weight: bold;\n}\n\n/*Force option color (affects IE and some Firefox versions)*/\noption {\n  color: #000;\n  background-color: #fff;\n\n  &[disabled] {\n    color: #ccc;\n  }\n}\n\nselect::-ms-expand {\n  display: none;\n}\n\n.hidden-label {\n  @mixin visuallyHidden;\n}\n\nlabel[for] {\n  cursor: pointer;\n}\n\n.form-vertical {\n  margin-bottom: calc($gutter / 2);\n\n  & input,\n  & select,\n  & textarea {\n    display: block;\n    margin-bottom: 30px;\n  }\n\n  & input[type=\"checkbox\"],\n  & input[type=\"radio\"],\n  & .btn {\n    display: inline-block;\n  }\n\n  & .btn:not(:last-child) {\n    margin-bottom: 30px;\n  }\n}\n\ninput,\ntextarea {\n  &.error {\n    border-color: $errorRed;\n    background-color: $errorRedBg;\n    color: $errorRed;\n  }\n}\n\nlabel.error {\n  color: $errorRed;\n}\n\n::placeholder {\n  color: inherit;\n  opacity: 0.5;\n}\n",".input-group {\n  display: flex;\n\n  & .input-group-btn:first-child,\n  & .input-group-btn:first-child > .btn,\n  & input[type=\"hidden\"]:first-child + .input-group-btn > .btn {\n    border-radius: var(--buttonRadius) 0 0 var(--buttonRadius);\n  }\n\n  & .input-group-btn:last-child > .btn {\n    border-radius: 0 var(--buttonRadius) var(--buttonRadius) 0;\n  }\n\n  & .input-group-field:last-child {\n    padding-left: 10px;\n  }\n\n  & input {\n    /*Nasty Firefox hack for inputs http://davidwalsh.name/firefox-buttons*/\n    &::-moz-focus-inner {\n      border: 0;\n      padding: 0;\n      margin-top: -1px;\n      margin-bottom: -1px;\n    }\n  }\n}\n\n.input-group-field,\n.input-group-btn {\n  margin: 0;\n}\n\n.input-group .input-group-field {\n  flex: 1 1 auto;\n  border-radius: 0;\n  color: currentColor;\n  border-color: currentColor;\n  min-width: 0;\n}\n\n.input-group-btn {\n  flex: 0 1 auto;\n  padding: 0;\n\n  & .icon {\n    vertical-align: initial;\n  }\n}\n\n.input-group-btn .btn {\n  margin-top: 0;\n  height: 100%;\n\n  &:hover {\n    padding-right: 20px;\n  }\n}\n",".icon {\n  display: inline-block;\n  width: 20px;\n  height: 20px;\n  vertical-align: middle;\n  fill: currentColor;\n\n  @nest .no-svg & {\n    display: none;\n  }\n}\n\n.icon--full-color {\n  fill: initial;\n}\n\nsvg,\nsymbol {\n  &.icon:not(.icon--full-color) {\n    & circle,\n    & ellipse,\n    & g,\n    & line,\n    & path,\n    & polygon,\n    & polyline,\n    & rect {\n      fill: inherit;\n      stroke: inherit;\n    }\n  }\n}\n\n/* Override the above for our stroke-only icons */\n.icon-bag,\n.icon-cart,\n.icon-search,\n.icon-close,\n.icon-chevron-down,\n.icon-email,\n.icon-user,\n.icon-hamburger,\n.icon-filter,\n.icon-globe,\n.icon-truck,\n.icon-package,\n.icon-circle-checkmark,\n.icon-leaf,\n.icon-lock,\n.icon-gift,\n.icon-tag,\n.icon-shield,\n.icon-heart,\n.icon-phone,\n.icon-ribbon,\n.icon-size-chart,\n.icon-tcwi-bills,\n.icon-tcwi-calendar,\n.icon-tcwi-cart,\n.icon-tcwi-charity,\n.icon-tcwi-gears,\n.icon-tcwi-gift,\n.icon-tcwi-globe,\n.icon-tcwi-open-envelope,\n.icon-tcwi-package,\n.icon-tcwi-plant,\n.icon-tcwi-recycle,\n.icon-tcwi-ribbon,\n.icon-tcwi-sales-tag,\n.icon-tcwi-shield,\n.icon-tcwi-stopwatch,\n.icon-tcwi-store,\n.icon-tcwi-thumbs-up,\n.icon-tcwi-trophy,\n.icon-tcwi-truck,\n.icon-tcwi-wallet,\n.icon-tcwi-chat,\n.icon-tcwi-phone {\n  & circle,\n  & ellipse,\n  & g,\n  & line,\n  & path,\n  & polygon,\n  & polyline,\n  & rect {\n    fill: none !important;\n    stroke-width: var(--iconWeight);\n    stroke: currentColor !important;\n    stroke-linecap: var(--iconLinecaps);\n    stroke-linejoin: var(--iconLinecaps);\n  }\n}\n\n.icon-cart circle {\n  fill: currentColor !important;\n}\n\n.icon__fallback-text {\n  @mixin visuallyHidden;\n}\n",".js-drawer-open {\n  overflow: hidden;\n}\n\n.drawer {\n  display: none;\n  position: fixed;\n  overflow: hidden;\n  -webkit-overflow-scrolling: touch;\n  top: 0;\n  bottom: 0;\n  z-index: $zindexDrawer;\n  color: $colorDrawerText;\n  background-color: $colorDrawers;\n  transition: transform $drawerCloseSpeed cubic-bezier(0.165, 0.84, 0.44, 1);\n\n  /*Allow whole drawer to be scrollable on short screens\n  typically when Android keyboard is open*/\n  @media screen and (max-height: $fixedHeightLimit) {\n    overflow: scroll;\n\n    & .drawer__contents {\n      height: auto;\n    }\n  }\n\n  & a:not(.btn) {\n    color: $colorDrawerText;\n\n    &:hover {\n      color: $colorDrawerText;\n    }\n  }\n\n  & input,\n  & textarea {\n    border-color: $colorDrawerText;\n\n    &:active,\n    &:focus {\n      border-color: $colorDrawerTextDarken;\n    }\n  }\n}\n\n/*Right drawer on desktop, from bottom on mobile*/\n.drawer--cart {\n  padding-bottom: calc($iosSafeZoneModifier * env(safe-area-inset-bottom));\n\n  &.drawer--is-open {\n    display: block;\n    transition-duration: $drawerOpenSpeed;\n  }\n\n  @media (--medium-up) {\n    width: $drawerCartWidth;\n    right: -$drawerCartWidth;\n\n    &.drawer--is-open {\n      transform: translateX(-$drawerCartWidth);\n    }\n  }\n}\n\n/*Remove most absolute positioning on mobile*/\n@media (--small) {\n  .drawer--cart {\n    width: 100%;\n    height: 100%;\n    left: 0;\n    right: 0;\n    top: auto;\n    transform: translateY(100%);\n\n    &.drawer--is-open {\n      transform: translateY(0);\n    }\n  }\n\n  .drawer--cart--static {\n    height: auto;\n    max-height: 100vh;\n    padding-bottom: 0;\n    padding-bottom: calc($iosSafeZoneModifier * env(safe-area-inset-bottom));\n  }\n}\n\n.js-drawer-open body:after,\n.js-drawer-closing body:after {\n  content: '';\n  display: block;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: $colorTextBody;\n  opacity: 0;\n  z-index: $zindexDrawerOverlay;\n}\n\n.js-drawer-open body:after {\n  animation: partial-fade-in 0.5s forwards;\n}\n\n.js-drawer-closing body:after {\n  animation: partial-fade-out 0.4s forwards;\n}\n\n.drawer__header,\n.drawer__scrollable,\n.drawer__footer {\n  padding-left: calc($gutter / 2);\n  padding-right: calc($gutter / 2);\n\n  @media (--medium-up) {\n    padding-left: $gutter;\n    padding-right: $gutter;\n  }\n}\n\n/*================ Drawer header ================*/\n.drawer__header {\n  display: flex;\n  align-items: center;\n  height: $drawerHeaderHeight;\n  width: 100%;\n  padding-top: calc($gutter / 2.6);\n  padding-bottom: calc($gutter / 2.6);\n  margin-bottom: 0;\n  overflow: visible; /*for close button hit area*/\n\n  @media (--medium-up) {\n    height: $drawerHeaderHeightLarge;\n  }\n}\n\n.drawer__header--auto {\n  height: auto;\n}\n\n.drawer__title {\n  @mixin headerFontStack;\n  font-size: 24px;\n  width: 100%;\n  flex: 1 1 auto;\n}\n\n.drawer__close {\n  flex: 1 1 auto;\n}\n\n/*Button sits on right by default*/\n.drawer__close-button {\n  position: relative;\n  right: -20px;\n  height: 100%;\n  padding: 15px;\n  color: inherit;\n\n  &:active {\n    background-color: $colorDrawersDim;\n  }\n\n  & .icon {\n    height: 28px;\n    width: 28px;\n  }\n}\n\n/*Rare use case left close button*/\n.drawer__close--left {\n  text-align: left;\n\n  & .drawer__close-button {\n    right: auto;\n    left: -20px;\n  }\n}\n\n/*================ Drawer header/inner/footer layout ================*/\n.drawer__contents {\n  height: 100vh;\n  height: 100dvh;\n  display: flex;\n  flex-direction: column;\n}\n\n.drawer__inner,\n.drawer__scrollable {\n  flex: 1 1 auto;\n  display: flex;\n  flex-direction: column;\n  overflow-y: hidden;\n}\n\n.drawer__scrollable {\n  padding-top: calc($gutter / 2);\n  overflow: hidden;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n\n  @media (--medium-up) {\n    padding-top: $gutter;\n  }\n}\n\n/*================ Drawer footer ================*/\n.drawer__footer {\n  padding-top: calc($gutter / 2);\n  padding-bottom: calc($gutter / 2);\n\n  @media (--medium-up) {\n    padding-top: calc($gutter / 1.35);\n  }\n}\n\n/*Additional checkout buttons*/\n.drawer__footer .additional-checkout-buttons {\n  margin-bottom: 10px;\n\n  & [data-shopify-buttoncontainer] {\n    justify-content: center;\n\n    & > * {\n      height: auto !important;\n    }\n  }\n}\n\n/*================ Cart-specific styles ================*/\n.drawer__cart.is-loading {\n  min-height: 100px;\n\n  & .cart {\n    transition: opacity 0.3s ease 0.7s;\n    opacity: 0.4;\n  }\n}\n\n.cart-notes {\n  margin-top: 10px;\n  margin-bottom: 10px;\n  min-height: 60px;\n  height: 60px;\n\n  @media (--medium-up) {\n    min-height: 80px;\n    height: 80px;\n  }\n}\n",".sticky-cart {\n  box-sizing: content-box;\n  display: none;\n  position: fixed;\n  bottom: 0;\n  border-bottom: calc($iosSafeZoneModifier * env(safe-area-inset-bottom)) solid;\n  border-bottom-color: $colorDrawers;\n  left: 0;\n  right: 0;\n  height: calc($thumbButtonHeight + ($thumbGutter / 2));\n  z-index: $zindexStickyCart;\n\n  @media (--medium-up) {\n    height: calc($thumbButtonHeight + $thumbGutter);\n  }\n}\n\n.sticky-cart--open {\n  display: block;\n  animation: cart-rise-up 0.35s forwards;\n\n  @nest .screen-layer-animating & {\n    transform: translateY(120%);\n    animation: none;\n  }\n}\n\n.sticky-cart__inner {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  background-color: $colorDrawers;\n  color: $colorDrawerText;\n  text-align: center;\n\n  & a:not(.btn) {\n    color: $colorDrawerText;\n    border-bottom: $borderWidth solid;\n    border-bottom-color: $colorDrawerText;\n  }\n\n  & .site-nav__link,\n  & .site-nav__link:hover {\n    color: $colorDrawerText;\n  }\n}\n\n.sticky-cart__item {\n  display: inline-block;\n  vertical-align: middle;\n  margin: 15px 7px;\n\n  @media (--medium-up) {\n    margin: 15px 15px;\n  }\n}\n\n/*Custom button styles*/\n.sticky-cart__item.btn,\n.cart__checkout--drawer {\n  font-size: calc(var(--typeBaseSize) + 2px);\n  padding: 10px 20px;\n\n  @nest [data-button_type_style=\"caps\"] & {\n    letter-spacing: 0.2em;\n    text-transform: uppercase;\n    font-size: calc(var(--typeBaseSize) - 2px);\n    padding: 15px;\n  }\n\n  @media (--medium-up) {\n    padding: 15px 30px;\n  }\n}\n\n.sticky-cart__item.btn {\n  background-color: $colorDrawerText;\n  color: $colorDrawers;\n\n  &.btn--loading span {\n    color: $colorDrawerText;\n  }\n}\n",".site-nav__thumb-cart,\n.quick-view__thumb-cart {\n  display: none;\n  align-items: center;\n  background-color: $colorCartDot;\n  color: $colorCartDotText;\n  height: $thumbButtonHeight;\n  padding: 0 20px;\n  border-top-right-radius: var(--buttonRadius);\n  border-bottom-right-radius: var(--buttonRadius);\n\n  @nest .cart-has-items & {\n    display: flex;\n  }\n\n  & .cart-link {\n    left: -1px;\n  }\n\n  /*Hide cart option when thumb menu open*/\n  @nest .site-nav__thumb-button.is-active + & {\n    display: none\n  }\n\n  &:hover,\n  &:active {\n    color: $colorCartDotText;\n  }\n\n  & .icon {\n    width: 30px;\n    height: 30px;\n  }\n\n  @nest [dir=\"rtl\"] & {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n    border-top-left-radius: var(--buttonRadius);\n    border-bottom-left-radius: var(--buttonRadius);\n  }\n}\n\n/*Hide menu cart button when on cart page*/\n.template-cart .site-nav__thumb-cart {\n  display: none;\n}\n\n.quick-view__thumb-cart {\n  position: fixed;\n  bottom: 20px;\n  bottom: $iosSafeZoneBottom;\n  right: 20px;\n  border-radius: 100%; /*always a circle*/\n  transition: opacity 0.15s ease-in;\n  z-index: $zindexModalClose;\n\n  @nest .screen-layer--is-sliding & {\n    opacity: 0;\n  }\n}\n",".placeholder-svg {\n  fill: var(--colorTextBodyAlpha035);\n  background-color: #f4f4f4;\n  width: 100%;\n  height: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  display: block;\n  padding: 30px 0;\n}\n\n.placeholder-noblocks {\n  padding: 40px;\n  text-align: center;\n}\n\n/*Placeholder animation for loading product form*/\n.placeholder-content {\n  overflow: hidden;\n  animation: placeholder-shimmer 1.3s linear infinite;\n  background-size: 400% 100%;\n  margin-bottom: 20px;\n  border-radius: 4px;\n\n  @media (--small) {\n    margin-left: auto;\n    margin-right: auto;\n  }\n}\n","$page_transition_duration: 0.8;\n$page_transition_duration_out: 0.3;\n\n@mixin appear-delay 20;\n\n[data-transitions=\"true\"] {\n  & .transition-body {\n    opacity: 0;\n\n    @nest .no-js & {\n      opacity: 1;\n    }\n  }\n\n  &.unloading .loader-logo {\n    display: flex;\n  }\n\n  &.unloading .loader-logo__img {\n    animation: pulse-fade 0.4s infinite linear;\n  }\n\n  &.loaded .transition-body {\n    opacity: 1;\n    animation-fill-mode: initial;\n  }\n}\n\n[data-animate_images=\"true\"] {\n  & [class*=\"appear-delay\"] {\n    opacity: 0;\n    transform: translate3d(0, 15px, 0);\n    transition: opacity .6s cubic-bezier(0.04, 0, 0.2, 1), transform .6s cubic-bezier(0.04, 0, 0.2, 1);\n\n    @nest .no-js & {\n      opacity: 1;\n    }\n  }\n\n  & .aos-animate [class*=\"appear-delay\"] {\n    opacity: 1;\n    transform: translate3d(0, 0, 0);\n  }\n\n  & .image-wrap {\n    & img:not([role=\"presentation\"]),\n    & svg,\n    & .animate-me {\n      opacity: 0;\n\n      @nest .no-js & {\n        opacity: 1;\n      }\n    }\n  }\n\n  & .aos-animate .image-wrap,\n  & .aos-animate.image-wrap {\n    & img:not([role=\"presentation\"]),\n    & svg,\n    & .animate-me,\n    & img[data-modal-lazy] {\n      animation: fade-in 0.6s ease 0s forwards;\n    }\n  }\n}\n\n","tool-tip[data-tool-tip=\"size-chart\"]:before {\n  opacity: 0.6;\n}\n\n.tool-tip__inner {\n  @nest tool-tip[data-tool-tip-open=\"true\"] & {\n    padding: 45px;\n\n    @media (--small) {\n      padding: 45px 20px 20px;\n    }\n  }\n}\n\n.tool-tip__close {\n  padding: 10px;\n}\n","product-recommendations[data-intent=\"complementary\"] {\n\n  & .grid-product__colors {\n    justify-content: flex-start;\n  }\n\n  & .grid-product__content {\n    margin-bottom: 0;\n  }\n\n  & .grid-product__hover-details .grid-product__colors,\n  & .grid-product__hover-details .grid-product__meta,\n  & .grid-product__hover-details .grid-product__tag {\n    opacity: 1;\n    transform: translateY(0)\n  }\n}\n","#SearchModal {\n  align-items: flex-start;\n\n  & .modal__inner {\n    max-width: 960px;\n    width: 100%;\n  }\n\n  & .modal__centered {\n    width: 100%;\n  }\n\n  & predictive-search {\n    margin-top: 15vh;\n  }\n\n  & .predictive__screen {\n    display: none !important;\n    visibility: hidden;\n    opacity: 0;\n    pointer-events: none;\n  }\n\n  & .search__input {\n    font-size: 2rem;\n\n    @media (--small) {\n      font-size: 1.5rem !important;\n    }\n  }\n\n  & .search__results {\n    padding-bottom: 2rem;\n  }\n\n  & .results__group-1 .results {\n    @media (--medium-up) {\n      padding-left: 0;\n    }\n  }\n\n  & .results__group-2 .results {\n    @media (--medium-up) {\n      padding-right: 0;\n    }\n  }\n\n  & .results__search-btn {\n    border: 0;\n    border-top: 1px solid;\n    padding-left: 10px;\n    margin-top: 10px;\n  }\n}\n\npredictive-search {\n  & .search__input {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  & h3 {\n    text-align: left;\n  }\n}\n",".site-footer {\n  @mixin smallFontSize;\n  margin-top: $gutter;\n\n  @media (--medium-up) {\n    margin-top: calc($gutter * 2);\n\n    @nest .template-index & {\n      margin-top: 0;\n    }\n  }\n}\n\n.site-footer__section + .site-footer__section {\n  margin-top: calc($gutter / 4);\n\n  @media (--medium-up) {\n    margin-top: calc($gutter / 2);\n  }\n}\n\n.footer__title {\n  @mixin headerFontStack;\n}\n\n.site-footer__copyright {\n  font-size: 9px;\n\n  @media (--medium-up) {\n    font-size: 11px;\n  }\n\n  & > span {\n    padding: 0 10px;\n  }\n}\n\n/*================ Footer menus ================*/\n.site-footer__linklist a {\n  color: currentColor;\n  display: block;\n  padding: 5px 10px;\n}\n\n/*================ Footer newsletter ================*/\n.site-footer__section--newsletter {\n  background-color: $colorNewsletter;\n  color: $colorNewsletterText;\n  padding: calc($gutter * 2) 0;\n  margin-bottom: calc($gutter * 2);\n\n  @media (--medium-up) {\n    & .page-width {\n      max-width: 60vw;\n    }\n  }\n\n  & .rte a {\n    color: $colorNewsletterText;\n  }\n}\n\n/*================ Multi-language/currency selectors ================*/\n.multi-selectors {\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n}\n\n.multi-selectors__item {\n  margin: 0 10px;\n}\n\n/*================ Payment Icons ================*/\n.payment-icons {\n  user-select: none;\n  cursor: default;\n\n  & li {\n    cursor: default;\n    margin: 0 4px 0;\n  }\n}\n",".note,\n.errors {\n  border-radius: var(--buttonRadius);\n  padding: 6px 18px;\n  margin-bottom: calc($gutter / 2);\n  border: $borderWidth solid transparent;\n  text-align: left;\n\n  & ul,\n  & ol {\n    margin-top: 0;\n    margin-bottom: 0;\n\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n\n  & li:last-child {\n    margin-bottom: 0;\n  }\n\n  & p {\n    margin-bottom: 0;\n  }\n}\n\n.note {\n  border-color: $colorBorder;\n}\n\n.errors {\n  & ul {\n    list-style: disc outside;\n    margin-left: 20px;\n  }\n}\n\n.note--success {\n  color: $successGreen;\n  background-color: $successGreenBg;\n  border-color: $successGreen;\n\n  & a {\n    color: $successGreen;\n    text-decoration: underline;\n\n    &:hover {\n      text-decoration: none;\n    }\n  }\n}\n\n.form-error,\n.errors {\n  color: $errorRed;\n  background-color: $errorRedBg;\n  border-color: $errorRed;\n\n  & a {\n    color: $errorRed;\n    text-decoration: underline;\n\n    &:hover {\n      text-decoration: none;\n    }\n  }\n}\n",".pagination {\n  @mixin smallFontSize;\n  margin: 0;\n  padding: calc($gutter * 2) 0 0;\n  text-align: center;\n\n  & > span {\n    display: inline-block;\n    line-height: 1;\n  }\n\n  & a {\n    display: inline-block;\n  }\n\n  & a,\n  & .page.current {\n    padding: 8px 12px;\n  }\n\n  & .page.current {\n    opacity: 0.3;\n  }\n\n  & .next,\n  & .prev {\n    color: $colorBtnPrimaryText;\n    background: $colorBtnPrimary;\n    width: 43px;\n    height: 43px;\n    line-height: 27px;\n    border-radius: 43px;\n    margin: 0 10px;\n\n    @media (--small) {\n      width: 35px;\n      height: 35px;\n      line-height: 19px;\n    }\n\n    & .icon {\n      color: $colorBtnPrimaryText;\n      width: 13px;\n      height: 13px;\n      @media (--small) {\n        width: 12px;\n        height: 12px;\n      }\n    }\n  }\n}\n",".price-range__slider-wrapper {\n  padding: 0 8px;\n  margin-bottom: 8px;\n\n  @media (--small) {\n    padding: 0 10px;\n  }\n}\n\n.price-range__input {\n  display: none;\n}\n\n.price-range__display-wrapper {\n  display: flex;\n  flex: 1 1 auto;\n  justify-content: space-between;\n  padding: 0;\n  margin-bottom: 8px;\n  width: 100%;\n  min-width: 150px;\n\n  @media (--small) {\n    padding: 0;\n  }\n}\n\n.price-range__display-max {\n  padding-left: 12px;\n}\n\n.noUi-horizontal .noUi-handle {\n  border: 0;\n  border-radius: 50%;\n  background: var(--colorTextBody);\n  box-shadow: 0 0 1px 2px rgb(255 255 255);\n  width: 12px;\n  height: 12px;\n  cursor: pointer;\n  right: -6px;\n  top: -3px;\n\n  &:hover, &:focus {\n    width: 14px;\n    height: 14px;\n    right: -7px;\n    top: -4px;\n  }\n\n  &:before, &:after {\n    content: none;\n  }\n}\n\n.noUi-target {\n  background: #f4f4f4;\n  border: 0;\n  box-shadow: none;\n}\n\n.noUi-connect {\n  background: var(--colorTextBody);\n}\n\n.noUi-horizontal {\n  height: 6px;\n}\n",".rte {\n  @mixin clearfix;\n\n  & + .rte {\n    margin-top: $gutter;\n  }\n\n  & img {\n    height: auto;\n  }\n\n  & p,\n  & ul,\n  & ol,\n  & table {\n    margin-bottom: 25px;\n\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n\n  & ul {\n    & ul {\n      margin-bottom: 0;\n    }\n  }\n\n  & a {\n    text-decoration: none;\n  }\n\n  /*Add some top margin to headers from the rich text editor*/\n  & h1, & h2, & h3, & h4, & h5, & h6 {\n    margin-top: 2.5em;\n    margin-bottom: 1em;\n  }\n\n  & h1, & h2, & h3, & h4, & h5, & h6 {\n    &:first-child {\n      margin-top: 0;\n    }\n\n    & a {\n      text-decoration: none;\n    }\n  }\n\n  /*In case merchants paste meta tags into their content by accident*/\n  & meta:first-child {\n    & + h1, & + h2, & + h3, & + h4, & + h5, & + h6 {\n      margin-top: 0;\n    }\n  }\n\n  & > div {\n    margin-bottom: calc($gutter / 2);\n\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n\n  & li {\n    margin-bottom: 0;\n  }\n\n  & table {\n    @mixin smallFontSize;\n    table-layout: fixed;\n  }\n}\n\n.rte--block {\n  margin-bottom: 20px;\n}\n\n.text-center .rte,\n.text-center.rte {\n  & ul,\n  & ol {\n    list-style-position: inside;\n    margin-left: 0;\n  }\n}\n\n.rte--nomargin {\n  margin-bottom: 0;\n}\n\n.rte--indented-images img:not([style]),\n.rte--indented-images img[style=\"float: none;\"] {\n  max-width: 100vw;\n  margin: 0 -$grid-gutter-small;\n  display: block;\n\n  @media (--medium-up) {\n    max-width: 130%;\n    margin: $gutter -15%;\n  }\n}\n\n/*Some people use text-align on the parent p tag, so do not style those images*/\n.rte--indented-images p[style] img {\n  display: inline;\n  margin: 0;\n  max-width: 100%;\n}\n",".header-layout {\n  display: flex;\n  justify-content: space-between;\n}\n\n@media (--small) {\n  .header-layout--mobile-logo-only {\n    justify-content: center;\n  }\n}\n\n.header-layout--center {\n  align-items: center;\n}\n\n.header-item {\n  display: flex;\n  align-items: center;\n  flex: 1 1 auto;\n}\n\n.header-item--logo {\n  flex: 0 0 auto;\n}\n\n.header-item--icons {\n  justify-content: flex-end;\n  flex: 0 1 auto;\n}\n\n/*Same default logo and icon container size, logo block width overrides*/\n.header-layout--left-center {\n  & .header-item--logo,\n  & .header-item--icons {\n    flex: 0 0 200px;\n    max-width: 50%;\n\n    @media (--medium-up) {\n      min-width: 130px; /*approx width of 2 icons*/\n    }\n  }\n}\n\n.header-layout[data-logo-align=\"center\"] {\n  & .header-item--logo {\n    @media (--medium-up) {\n      margin: 0 calc($gutter / 1.5);\n    }\n  }\n\n  & .header-item--navigation,\n  & .header-item--icons {\n    flex: 1 1 130px; /*aprox width of 2 icons*/\n  }\n}\n\n@media (--medium-up) {\n  .header-layout[data-logo-align=\"left\"] {\n    & .site-header__logo {\n      margin-right: calc($gutter / 3);\n    }\n  }\n}\n\n.header-item--logo-split {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex: 1 1 100%;\n\n  & .header-item:not(.header-item--logo) {\n    text-align: center;\n    flex: 1 1 20%;\n  }\n}\n\n.header-item--split-left {\n  justify-content: flex-end;\n}\n\n/*Icon alignment*/\n.header-item--left {\n  & .site-nav {\n    margin-left: -$siteNavIconPadding;\n\n    @media (--small) {\n      margin-left: calc(-$siteNavItemPadding / 2);\n    }\n  }\n}\n\n.header-item--icons {\n  & .site-nav {\n    margin-right: -$siteNavIconPadding;\n\n    @media (--small) {\n      margin-right: calc(-$siteNavItemPadding / 2);\n    }\n  }\n}\n",".site-header {\n  position: relative;\n  padding: 10px 0;\n  background: $colorNav;\n\n  @media (--medium-up) {\n    padding: 30px 0;\n  }\n}\n\n.site-header--sticky {\n  position: fixed;\n  left: 0;\n  right: 0;\n  top: 0;\n  padding: 0;\n  transform: translate3d(0, -100%, 0);\n  transition: none;\n  z-index: $zindexStickyHeader;\n}\n\n.site-header--opening {\n  transform: translate3d(0, 0, 0);\n  transition: transform 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);\n}\n\n.site-header__logo {\n  margin: calc($gutter / 3) 0;\n  display: block;\n\n  @media (--medium-up) {\n    @nest .text-center & {\n      padding-right: 0;\n      margin: calc($gutter / 3) auto;\n    }\n  }\n\n  @media (--small) {\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  @nest .header-layout[data-logo-align=\"center\"] & {\n    margin-left: auto;\n    margin-right: auto;\n    text-align: center;\n  }\n\n  & a,\n  & a:hover {\n    text-decoration: none;\n  }\n\n  & img {\n    display: block;\n\n    @nest .header-layout--center & {\n      margin: 0 auto;\n    }\n  }\n}\n\n.site-header__logo-link {\n  display: flex;\n  align-items: center;\n  color: $colorNavText;\n\n  @media (--small) {\n    margin: 0 auto;\n  }\n\n  &:hover {\n    color: $colorNavText;\n  }\n}\n\n/*Sticky header on top of image/slideshow*/\n.header-wrapper--overlay {\n  position: absolute;\n  left: 0;\n  right: 0;\n  z-index: $zindexOverlayHeader;\n  background: none;\n  background: linear-gradient(to bottom, rgba(0,0,0,0.3) 0%,rgba(0,0,0,0) 100%);\n  transform: translateZ(0);\n\n  &:not(.header-wrapper--sticky) .site-header {\n    background: none;\n  }\n}\n\n.header-wrapper--sticky {\n  transform: none;\n  background: none;\n}\n",".search-modal__wrapper {\n  border-bottom: $borderWidth solid currentColor;\n}\n\n.search-modal__input {\n  border: 0;\n  padding-left: 0;\n  font-size: 2em;\n\n  &:focus {\n    border: 0;\n  }\n}\n\n.search-modal__submit {\n  & svg {\n    width: 40px;\n    height: 40px;\n  }\n}\n",".search-bar {\n  max-width: 100%;\n}\n\n.search-bar--page {\n  max-width: 300px;\n  margin: $gutter auto;\n}\n\n.search-bar .icon {\n  width: 24px;\n  height: 24px;\n  vertical-align: middle;\n}\n",".section-header {\n  margin-bottom: $sectionHeaderBottomSmall;\n  text-align: center;\n\n  @media (--medium-up) {\n    margin-bottom: $sectionHeaderBottom;\n  }\n}\n\n.section-header--hero {\n  position: relative;\n  flex: 1 1 100%;\n  color: $colorHeroText;\n  margin-bottom: calc($gutter / 2);\n\n  @media (--medium-up) {\n    margin-bottom: $gutter;\n  }\n}\n\n.section-header__title {\n  margin-bottom: 0;\n}\n\n.section-header__description {\n  @mixin largeFontSize;\n  max-width: 700px;\n  margin: 0 auto;\n\n  @nest .section-header__title + & {\n    margin-top: 10px;\n  }\n}\n\n.section-header__description--large {\n  @mixin largeFontSize;\n}\n\n.section-header--404 {\n  padding-top: 80px;\n}\n\n.section-header select {\n  margin-left: calc($gutter / 2);\n}\n.section-header .btn {\n  float: right;\n  margin: 0;\n}\n\n.site-nav__details summary svg {\n  padding-left: 10px;\n}\n",".site-nav {\n  @mixin largeFontSize;\n  margin: 0;\n\n  /*Sticky header bar is desktop only*/\n  @nest .site-header--sticky & {\n    font-size: calc((var(--typeBaseSize) * 1.22) - 3px); /*3 below largerFontSize*/\n  }\n}\n\n.site-nav__details {\n  cursor: pointer;\n}\n\n.site-navigation {\n  @nest .text-center & {\n    margin: 0 auto;\n  }\n\n  @nest .text-right & {\n    width: 100%;\n  }\n\n  @nest .header-layout--left & {\n    padding-left: calc($gutter / 3);\n  }\n}\n\n.site-nav--icons {\n  display: flex;\n  align-items: center;\n}\n\n.site-nav__icons {\n  white-space: nowrap;\n}\n\n.site-nav__item {\n  position: relative;\n  display: inline-block;\n  margin: 0;\n\n  & li {\n    display: block;\n  }\n}\n\n.site-nav__link {\n  display: inline-block;\n  vertical-align: middle;\n  text-decoration: none;\n  padding: calc($siteNavItemPadding / 2) $siteNavItemPadding;\n  white-space: nowrap;\n  color: $colorNavText;\n\n  &:hover {\n    color: $colorNavText;\n  }\n\n  @nest .is-light & {\n    color: $colorStickyNavLinks;\n\n    &:hover {\n      color: $colorStickyNavLinks;\n    }\n  }\n\n  @nest .site-nav--has-dropdown > & {\n    position: relative;\n    z-index: calc($zindexNavDropdowns + 1);\n  }\n\n  @media (--small) {\n    padding: calc($siteNavItemPadding / 2);\n\n    @nest .header-layout--center & {\n      padding-left: 2px;\n      padding-right: 2px;\n    }\n  }\n}\n\n/*Keep active state on parent dropdown link*/\n.site-nav--has-dropdown {\n  z-index: calc($zindexNavDropdowns + 1);\n\n  /*Force on top of other dropdowns when active*/\n  &:hover,\n  &.is-focused {\n    z-index: calc($zindexNavDropdowns + 2);\n  }\n}\n\n.site-nav--has-dropdown.is-focused > a,\n.site-nav--has-dropdown:hover > a {\n  color: $colorTextBody !important;\n  background-color: $colorBody;\n  opacity: 1;\n  transition: none;\n}\n\n[data-animate_underlines=\"true\"] {\n  & .site-nav__details summary:not(.site-nav__dropdown-link--second-level):before,\n  & .site-nav__item > a:before {\n    content: '';\n    position: absolute;\n    left: 15px;\n    right: 100%;\n    bottom: 0;\n    display: block;\n    border-bottom: $borderWidth solid currentColor;\n    transition: right $animate_underlines_duration ease;\n    z-index: calc($zindexNavDropdowns + 1);\n  }\n\n  & .site-nav__details:hover summary:not(.site-nav__dropdown-link--second-level),\n  & .site-nav__item.is-focused > a,\n  & .site-nav__item:hover > a,\n  & .site-nav--active > a {\n    &:before {\n      left: 15px;\n      right: 15px;\n    }\n  }\n}\n\n.site-nav__link--icon {\n  padding-left: $siteNavIconPadding;\n  padding-right: $siteNavIconPadding;\n\n  @media (--small) {\n    padding-left: calc($siteNavItemPadding / 2);\n    padding-right: calc($siteNavItemPadding / 2);\n\n    & + .site-nav__link--icon {\n      margin-left: -3px; /*~amount of inline-block space*/\n    }\n  }\n\n  & .icon {\n    display: block;\n    width: $desktopMenuIconSize;\n    height: $desktopMenuIconSize;\n  }\n}\n\n/*================ Dropdowns ================*/\n.site-nav__dropdown {\n  position: absolute;\n  left: 0;\n  margin: 0;\n  z-index: $zindexNavDropdowns;\n  display: block;\n  visibility: hidden;\n  background-color: $colorBody;\n  min-width: 100%;\n  padding: calc($gutter / 3) 0 5px;\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.09);\n  transform: translate3d(0, -12px, 0);\n\n  @nest details[open] > & {\n    display: block;\n    visibility: visible;\n    transform: translate3d(0, 0, 0);\n    transition: all 300ms cubic-bezier(0.2, 0.06, 0.05, 0.95);\n  }\n\n  /*Right-align last two dropdown items*/\n  @nest .header-layout--right .site-nav--has-dropdown:nth-last-child(2) &,\n  .header-layout--right .site-nav--has-dropdown:last-child & {\n    left: auto;\n    right: 0;\n\n    & .site-nav__deep-dropdown {\n      left: auto;\n      right: 100%;\n\n      &:before {\n        left: auto;\n        right: 0;\n        background-image: linear-gradient(to left, rgba(0,0,0,0.09), transparent);\n      }\n    }\n  }\n\n  & li {\n    margin: 0;\n  }\n\n  & > li {\n    position: relative;\n\n    & > a {\n      position: relative;\n      z-index: calc($zindexNavDropdowns + 1);\n    }\n  }\n\n  & a {\n    background-color: $colorBody;\n    padding-right: 30px;\n  }\n}\n\n/*================ Third level dropdown ================*/\n.site-nav__deep-dropdown {\n  background-color: $colorBody;\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.09);\n  position: absolute;\n  top: 0;\n  left: 100%;\n  margin: 0;\n  visibility: hidden;\n  opacity: 0;\n  z-index: $zindexNavDropdowns;\n  transform: translate3d(-12px, 0, 0);\n\n  /*Last menu item is anchored to right if\n    - center aligned menu*/\n  @nest .header-layout--center .site-nav__item:last-child & {\n    left: auto;\n    right: 100%;\n  }\n\n  @nest details[open] > & {\n    visibility: visible;\n    opacity: 1;\n    transform: translate3d(0, 0, 0);\n    transition: all 300ms cubic-bezier(0.2, 0.06, 0.05, 0.95);\n  }\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 10px;\n    background-image: linear-gradient(to right, rgba(0,0,0,0.09), transparent);\n    pointer-events: none;\n\n    /*Reverse box shadow on submenus if\n      - center aligned menu*/\n    @nest .header-layout--center .site-nav__item:last-child & {\n      left: auto;\n      right: 0;\n      background-image: linear-gradient(to left, rgba(0,0,0,0.09), transparent);\n    }\n  }\n}\n\n.site-nav__dropdown-link--has-children {\n  @nest .site-nav__deep-dropdown-trigger:hover & {\n    background-color: $colorBodyDim;\n  }\n\n  &:hover,\n  &:focus {\n    background-color: $colorBodyDim;\n  }\n}\n\n/*Rotate to face right*/\n.site-nav__deep-dropdown-trigger .icon-chevron-down {\n  position: absolute;\n  top: 50%;\n  right: 10px;\n  width: $desktopMenuChevronSize;\n  height: $desktopMenuChevronSize;\n  transform: rotate(-90deg) translateX(50%);\n}\n\n/*================ Cart bubble for items in cart ================*/\n.cart-has-items {\n  & .site-nav__link--cart.site-nav__link--cart {\n    background-color: $colorCartDot;\n    color: $colorCartDotText;\n    border-radius: 50%;\n    padding: $siteNavIconPadding;\n\n    &:hover,\n    &:active {\n      color: $colorCartDotText;\n    }\n  }\n}\n\n@media (--medium-up) {\n  .site-nav__link--icon .icon {\n    width: 28px;\n    height: 28px;\n\n    @nest .site-header--sticky & {\n      width: 24px;\n      height: 24px;\n    }\n  }\n}\n\n.cart-link {\n  position: relative;\n  display: block;\n  line-height: 1;\n\n  @nest .site-nav__link--cart & {\n    left: -1px;\n  }\n}\n\n.cart-link__bubble {\n  display: none;\n  background-color: currentColor;\n  text-align: center;\n  line-height: 15px;\n\n  @nest .cart-has-items & {\n    display: block;\n    position: absolute;\n    top: 14px;\n    right: -2px;\n    width: 15px;\n    height: 15px;\n    border-radius: 50%;\n  }\n\n  /*Slight position change with cart icon*/\n  @nest .cart-has-items [data-icon=\"cart\"] & {\n    top: 0;\n    right: -4px;\n  }\n}\n\n.cart-link__bubble-num {\n  display: block;\n  font-size: 8px;\n  letter-spacing: -0.5px;\n  color: $colorCartDot;\n}\n","$z-index-sub-nav: 8;\n$return-button-width: 55px;\n$nav-button-padding: 8px;\n$transition-drawer: all 0.45s cubic-bezier(0.29, 0.63, 0.44, 1);\n\n$thumb-nav-open-duration: 0.25s;\n$thumb-nav-close-duration: 0.1s;\n\n.page-container {\n  display: block;\n  transition: $transition-drawer;\n}\n\n.js-toggle-slide-nav {\n  & .icon-close {\n    display: none;\n  }\n\n  &.is-active {\n    & .icon-close {\n      display: inline-block;\n    }\n\n    & .icon-hamburger,\n    & .icon-menu-label {\n      display: none;\n    }\n  }\n}\n\n.icon-menu-label {\n  margin-left: 5px;\n}\n\n.slide-nav {\n  display: block;\n  transform: translate3d(0, 0, 0);\n  transition: $transition-drawer;\n  margin: 0;\n  padding: 15px 0 0;\n\n  @nest .body--sticky-cart-open & {\n    padding-bottom: 15px;\n  }\n\n  @nest .sub-nav--is-open & {\n    transform: translate3d(-100%, 0, 0);\n  }\n\n  @nest .third-nav--is-open & {\n    transform: translate3d(-200%, 0, 0);\n  }\n\n  & button {\n    background-color: transparent;\n    border: 0;\n    margin: 0;\n  }\n\n  & a,\n  & button {\n    color: $colorBtnPrimaryText;\n\n    &:hover,\n    &:active,\n    &:focus {\n      color: $colorBtnPrimaryText;\n    }\n  }\n}\n\n.slide-nav__link,\n.slide-nav__sublist-link {\n  @mixin headerFontStack;\n  display: block;\n  width: 100%;\n  padding: $nav-button-padding calc($nav-button-padding * 2);\n  transition: $colorBtnPrimaryBgTransition;\n  text-align: center;\n\n  &:active {\n    background-color: $colorBtnPrimaryActive;\n  }\n}\n\n.slide-nav__link {\n  position: relative;\n  transition: opacity 0.5s ease;\n}\n\n.sub-nav--is-open .slide-nav__link:not(.slide-nav__sublist-link) {\n  opacity: 0;\n  transition-delay: 0.15s;\n}\n\n.slide-nav__sublist-link:not(.slide-nav__sublist-header) {\n  padding-right: calc($nav-button-padding * 2);\n  padding-left: calc($nav-button-padding * 2);\n}\n\n/*Account for return arrow*/\n.slide-nav__sublist-header {\n  padding-right: calc($return-button-width + $nav-button-padding);\n}\n\n.slide-nav__item {\n  display: block;\n  width: 100%;\n  margin: 0;\n\n  & .icon {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    height: 12px;\n    width: 10px;\n    margin: -6px 0 0 -5px;\n  }\n}\n\n.slide-nav__return-btn {\n  position: relative;\n  padding: 24px 0;\n  width: $return-button-width;\n  vertical-align: middle;\n}\n\n.slide-nav__icon {\n  display: block;\n  position: absolute;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  padding-left: 30px;\n  padding-right: 30px;\n  pointer-events: none;\n  overflow: hidden;\n}\n\n.slide-nav__table {\n  display: table;\n  width: 100%;\n  margin-bottom: 20px;\n}\n\n.slide-nav__table-cell {\n  display: table-cell;\n  vertical-align: middle;\n  width: 1%;\n  text-align: left;\n  white-space: normal;\n}\n\n.slide-nav__toggle-button {\n  padding: 20px 15px;\n}\n\n.slide-nav__dropdown {\n  display: block;\n  visibility: hidden;\n  position: absolute;\n  background-color: $colorBtnPrimary;\n  z-index: $z-index-sub-nav;\n  width: 100%;\n  top: 0;\n  right: -100%;\n  padding: 15px 0 0;\n  margin: 0;\n  opacity: 0;\n  transition: all 1s ease 0.15s;\n\n  @nest .body--sticky-cart-open & {\n    padding-bottom: 15px;\n  }\n\n  &.is-active {\n    visibility: visible;\n    opacity: 1;\n  }\n\n  & .slide-nav__sublist-header {\n    display: table-cell;\n    vertical-align: middle;\n    padding-left: $nav-button-padding;\n  }\n}\n\n/*================ Mobile thumb menu trigger ================*/\n.site-nav__thumb-menu {\n  position: fixed;\n  bottom: 0;\n  bottom: calc($iosSafeZoneModifier * env(safe-area-inset-bottom));\n  left: 0;\n  right: 0;\n  display: flex;\n  margin: calc($thumbGutter / 2);\n  z-index: $zindexThumbMenuButton;\n\n  @media (--medium-up) {\n    margin: $thumbGutter;\n    max-width: $thumbMenuDesktopWidth;\n  }\n\n  @nest .js-animate & {\n    transition: transform 0.25s;\n  }\n\n  @nest .body--sticky-cart-open & {\n    display: none;\n  }\n\n  /*Hide on short screens, typically Android with keyboard open*/\n  @media screen and (max-height: 400px) {\n    display: none;\n  }\n}\n\n/*Animate thumb menu button in\n- desktop on scroll\n- mobile on page load*/\n.site-nav__thumb-menu--inactive {\n  transform: translateY(200%);\n}\n\n.btn.site-nav__thumb-button {\n  width: 100%;\n  font-size: 19px;\n  letter-spacing: 0.2em;\n  text-transform: uppercase;\n  height: $thumbButtonHeight;\n\n  & .icon {\n    width: 30px;\n    height: 30px;\n  }\n}\n\n/*Remove top left/right corners when active to\n  line up with open menu*/\n[data-button_style=\"round\"] {\n  & .site-nav__thumb-button.is-active {\n    border-top-right-radius: 0;\n    border-top-left-radius: 0;\n  }\n\n  /*Remove right border-radius if cart item exists, but not on cart page*/\n  @nest [dir=\"ltr\"] &:not(.template-cart).cart-has-items .site-nav__thumb-button {\n    border-top-right-radius: 0;\n  }\n\n  @nest [dir=\"ltr\"] &:not(.template-cart).cart-has-items  .site-nav__thumb-button:not(.is-active) {\n    border-bottom-right-radius: 0;\n  }\n\n  /*Remove left border-radius if same as above, but RTL*/\n  @nest [dir=\"rtl\"] &:not(.template-cart).cart-has-items .site-nav__thumb-button {\n    border-top-left-radius: 0;\n  }\n\n  @nest [dir=\"rtl\"] &:not(.template-cart).cart-has-items  .site-nav__thumb-button:not(.is-active) {\n    border-bottom-left-radius: 0;\n  }\n}\n\n/*================ Mobile nav positioning — thumb/slide ================*/\n.slide-nav__overflow--thumb {\n  display: none;\n  overflow-x: hidden;\n  position: fixed;\n  left: $thumbGutter;\n  bottom: $thumbBottomPosition;\n  bottom: calc($thumbBottomPosition + ($iosSafeZoneModifier * env(safe-area-inset-bottom)));\n  max-height: calc(100vh - $thumbButtonHeight - ($thumbGutter * 2));\n  transition: all 0.2s ease-out;\n  z-index: $zindexThumbMenu;\n\n  @nest [data-button_style=\"round\"] & {\n    border-top-right-radius: var(--buttonRadius);\n    border-top-left-radius: var(--buttonRadius);\n  }\n\n  &.js-menu--is-open {\n    display: block;\n    background-color: $colorBtnPrimary;\n    transition: background-color 0.1s ease $thumb-nav-open-duration;\n  }\n\n  @media (--medium-up) {\n    width: 100%;\n    max-width: $thumbMenuDesktopWidth;\n\n    @nest .body--sticky-cart-open & {\n      left: 50%;\n      transform: translate(-50%);\n      max-width: $thumbMenuDesktopWidthStickyActive;\n    }\n  }\n\n  @media (--small) {\n    left: calc($thumbGutter / 2);\n    right: calc($thumbGutter / 2);\n    bottom: $thumbBottomPositionSmall;\n    bottom: calc($thumbBottomPositionSmall + ($iosSafeZoneModifier * env(safe-area-inset-bottom)));\n    max-height: calc(100vh - $thumbButtonHeight - $thumbGutter);\n    max-width: 100%;\n\n    @nest .body--sticky-cart-open & {\n      left: 0;\n      right: 0;\n    }\n  }\n\n  & .slide-nav__dropdown {\n    background-color: $colorBtnPrimary;\n\n    @nest [data-button_style=\"round\"] & {\n      border-top-right-radius: var(--buttonRadius);\n      border-top-left-radius: var(--buttonRadius);\n    }\n  }\n}\n\n.slide-nav__wrapper {\n  background-color: $colorBtnPrimary;\n  transform: translateY(100%);\n  transition: all $thumb-nav-close-duration linear; /*closing animation*/\n\n  @nest [data-button_style=\"round\"] & {\n    border-top-right-radius: var(--buttonRadius);\n    border-top-left-radius: var(--buttonRadius);\n  }\n\n  @nest .js-menu--is-open & {\n    transform: translateY(0);\n    transition: all $thumb-nav-open-duration cubic-bezier(0.29, 0.63, 0.44, 1); /*open animation*/\n  }\n}\n\n.slide-nav__overflow--slide {\n  display: none;\n  position: absolute;\n  transform: translate3d(0, -100%, 0);\n  transition: $transition-drawer;\n  width: 100%;\n  background-color: $colorBtnPrimary;\n\n  /*Hack to prevent sliver of background color above nav while animating*/\n  &:after {\n    content: '';\n    position: absolute;\n    top: -9px;\n    left: 0;\n    width: 100%;\n    height: 10px;\n    background-color: $colorBtnPrimaryText;\n  }\n\n  &.js-menu--is-open {\n    display: block;\n  }\n}\n",".modal {\n  display: none;\n  bottom: 0;\n  left: 0;\n  opacity: 1;\n  overflow: hidden;\n  position: fixed;\n  right: 0;\n  top: 0;\n  z-index: $zindexModal;\n  align-items: center;\n  justify-content: center;\n\n  @nest .modal-open & {\n    &:before {\n      content: '';\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background-color: $colorBody;\n    }\n  }\n\n  &.modal--square:before {\n    opacity: 0.6;\n  }\n}\n\n.modal-open .modal--newsletter:before {\n  background-color: var(--colorTextBodyAlpha05);\n}\n\n.modal--is-active {\n  display: flex;\n}\n\n/*Class on body element when modal open.\nOnly medium-up because iOS jumps to top otherwise*/\n@media (--medium-up) {\n  .modal-open {\n    overflow: hidden;\n  }\n}\n\n.modal__inner {\n  transform-style: preserve-3d;\n  flex: 0 1 auto;\n  margin: calc($gutter / 2);\n  max-width: 100%;\n  display: flex;\n  align-items: center;\n\n  @media (--medium-up) {\n    margin: 40px;\n  }\n\n  & img {\n    display: block;\n    max-height: 90vh;\n  }\n}\n\n/*No max height on product images*/\n.modal__inner {\n  & .image-wrap img {\n    max-height: none;\n  }\n}\n\n.modal__centered {\n  position: relative;\n  flex: 0 1 auto;\n  min-width: 1px; /*ie10 thing*/\n  max-width: 100%;\n}\n\n.modal__centered-content {\n  @nest .modal--square & {\n    max-height: 80vh;\n    padding: calc($gutter * 0.75);\n    min-width: 200px;\n    min-height: 200px;\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    background-color: $colorBody;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n\n    @media (--medium-up) {\n      padding: calc($gutter * 1.5);\n      max-height: 90vh;\n      max-width: 1200px;\n    }\n  }\n}\n\n.modal__close {\n  position: fixed;\n  top: calc($gutter / 2);\n  right: calc($gutter / 2);\n  border: 0;\n  box-shadow: none; /*override btn--tertiary*/\n\n  @media (--small) {\n    top: 15px;\n    right: 15px;\n  }\n\n  &:focus {\n    box-shadow: none;\n  }\n\n  @nest .modal--square & {\n    position: absolute;\n    padding: calc($gutter / 3);\n  }\n}\n\n.modal__close--bottom {\n  position: absolute;\n  bottom: 20px;\n  bottom: $iosSafeZoneBottom;\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n.modal__footer-text {\n  @mixin smallFontSize;\n  position: fixed;\n  padding: calc($gutter / 2) $gutter;\n  bottom: 0;\n  text-align: center;\n  background-color: $colorBody;\n}\n\n/*Ajax page adjustments*/\n.modal {\n  & .page-content,\n  & .page-width {\n    padding: 0;\n  }\n}\n\n/*Google-friendly non intrusive mobile modal*/\n.popup-cta {\n  margin: calc($gutter / 2) 0;\n}\n\n/*Newsletter and verification modal is bottom aligned*/\n.modal--newsletter,\n.modal--age-verification {\n  align-items: flex-end;\n\n  &.modal--is-active .modal__inner {\n    animation: rise-up 500ms forwards;\n  }\n\n  & .modal__inner {\n    width: 100%;\n    margin: 0;\n  }\n\n  & .modal__centered {\n    width: 100%;\n\n    & .modal__centered-content {\n      max-width: none;\n    }\n  }\n}\n\n@media (--small) {\n  .modal--mobile-friendly {\n    top: auto;\n    bottom: 0;\n    overflow: auto;\n\n    &.modal--square .modal__centered-content {\n      padding: 20px 20px 0;\n    }\n\n    &.modal--is-active {\n      overflow: auto;\n    }\n\n    @nest .modal-open & {\n      &:before {\n        display: none;\n      }\n    }\n\n    & .modal__inner {\n      margin: 0;\n      border-top: 2px solid;\n      border-top-color: $colorTextBody;\n    }\n\n    & .modal__close {\n      background: none;\n      padding: 5px;\n      margin: 0;\n    }\n\n    /*Prevent overlap with close button*/\n\n    & .modal__title {\n      margin-right: 40px;\n    }\n  }\n}\n\n/* Custom layouts for when video modal is open at the same time as a quick view product screen */\n.screen-layer-open.video-modal-open {\n  & .root {\n    display: block;\n  }\n\n  & .modal {\n    z-index: calc($zindexModal + 1);\n  }\n}\n",".js-qty__wrapper {\n  position: relative;\n  max-width: 80px;\n  min-width: 60px;\n  overflow: visible;\n  background-color: $colorInputBg;\n  color: $colorInputText;\n\n  &.is-loading {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n}\n\n.js-qty__num {\n  display: block;\n  background: none;\n  text-align: center;\n  width: 100%;\n  padding: 5px 20px;\n  margin: 0;\n  z-index: 1;\n}\n\n.js-qty__adjust {\n  cursor: pointer;\n  position: absolute;\n  display: block;\n  top: 0;\n  bottom: 0;\n  border: 0 none;\n  background: none;\n  text-align: center;\n  overflow: hidden;\n  padding: 0 10px;\n  line-height: 1;\n  user-select: none;\n  backface-visibility: hidden;\n  transition: background-color 0.1s ease-out;\n  z-index: 2;\n  fill: $colorInputText;\n\n  & .icon {\n    display: block;\n    font-size: 8px;\n    vertical-align: middle;\n    width: 10px;\n    height: 10px;\n    fill: inherit;\n  }\n\n  &:hover {\n    color: $colorInputText;\n  }\n\n  @nest .js-qty__num:active ~ &,\n  .js-qty__num:focus ~ & {\n    border-color: $colorTextBody;\n  }\n}\n\n.js-qty__adjust--plus {\n  right: 0;\n}\n\n.js-qty__adjust--minus {\n  left: 0;\n}\n\n/*================ Qty selector in drawer ================*/\n.drawer {\n  & .js-qty__wrapper {\n    background-color: transparent;\n    border-color: currentColor;\n    max-width: 90px;\n  }\n\n  & .js-qty__num {\n    color: $colorDrawerText;\n    border-color: currentColor;\n    padding-top: 5px;\n    padding-bottom: 5px;\n  }\n\n  & .js-qty__adjust {\n    border-color: currentColor;\n    color: $colorDrawerText;\n    fill: $colorDrawerText;\n\n    &:hover {\n      opacity: 0.5;\n    }\n  }\n}\n\n.drawer .js-qty__num:active ~ .js-qty__adjust,\n.drawer .js-qty__num:focus ~ .js-qty__adjust {\n  border-color: currentColor;\n}\n","/*Hide main content when product layer open on Safari\nbecause it doesn't handle body scrolling well*/\n.screen-layer-open .root {\n  display: none;\n}\n\n/*Force it visible when closing the layer for the animation*/\n.screen-layer-closing .root {\n  display: block;\n}\n\n.screen-layer {\n  position: relative;\n  display: none;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  opacity: 1;\n  overflow: visible;\n  z-index: $zindexModal;\n\n  /*Maintain visibility if animating*/\n  @nest .screen-layer-animating & {\n    position: fixed;\n  }\n}\n\n.screen-layer__inner {\n  background-color: $colorBody;\n}\n\n.screen-layer--is-sliding {\n  & .screen-layer__inner {\n    animation: page-slide-reveal-down 500ms forwards;\n  }\n}\n\n.screen-layer--is-sliding {\n  display: block !important; /*override .is-transitioning styles*/\n  overflow: hidden;\n}\n\n.screen-layer--is-active {\n  display: block !important; /*override .is-transitioning styles*/\n}\n\n.screen-layer__inner {\n  width: 100%;\n  max-height: 100%;\n  min-height: 100%;\n  -webkit-overflow-scrolling: touch;\n}\n\n.screen-layer__close {\n  position: fixed;\n  bottom: 20px;\n  bottom: $iosSafeZoneBottom;\n  left: 50%;\n  transition: opacity 0.15s ease-in;\n  z-index: $zindexModalClose;\n  transform: translateX(-50%);\n\n  @media (--medium-up) {\n    top: 20px;\n    right: 20px;\n    left: auto;\n    transform: none;\n    bottom: auto;\n  }\n\n  @nest .screen-layer--is-sliding & {\n    opacity: 0;\n  }\n}\n",".currency-flag {\n  transform: scale(0.55);\n  margin: -0.55rem;\n}\n\n.multi-picker__label {\n  display: inline-block;\n  vertical-align: middle;\n  text-underline-offset: 0.2rem;\n\n  @nest .currency-flag + & {\n    padding-left: 10px;\n  }\n\n  @nest .currency-flag-large + & {\n    padding-left: 5px;\n  }\n}\n\n/*\n  Center popup on mobile so long country/currency names\n  do not cause horizontal scroll\n */\n@media (--small) {\n  [data-disclosure-currency] .disclosure-list {\n    left: 50%;\n    transform: translateX(-50%);\n    max-width: 95vw;\n  }\n}\n","$max-height-disclosure: 60vh;\n$min-height-disclosure: 92px;\n\n.disclosure {\n  position: relative;\n}\n\n.disclosure__toggle {\n  white-space: nowrap;\n  border-bottom: 0;\n}\n\n.disclosure-list {\n  background-color: $colorBody;\n  color: $colorTextBody;\n  bottom: 100%;\n  padding: 10px 0;\n  margin: 0;\n  position: absolute;\n  display: none;\n  min-height: $min-height-disclosure;\n  max-height: $max-height-disclosure;\n  overflow-y: auto;\n  border-radius: $input-radius;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.09);\n\n  & a {\n    color: currentColor;\n  }\n}\n\n.disclosure-list--visible {\n  display: block;\n}\n\n.disclosure-list__item {\n  white-space: nowrap;\n  padding: 5px 30px 4px 15px;\n  text-align: left;\n}\n\n.disclosure-list__option {\n  &:focus,\n  &:hover {\n    & .multi-picker__label {\n      text-decoration: underline;\n      text-decoration-thickness: $borderWidth;\n    }\n  }\n}\n\n.disclosure-list__item--current {\n  & .multi-picker__label {\n    text-decoration: underline;\n    text-decoration-thickness: $borderWidth;\n  }\n}\n","$collapsible-trigger-icon-width: 12px;\n$collapsible-open-transition: opacity 0s cubic-bezier(.25,.46,.45,.94), height 0s cubic-bezier(.25,.46,.45,.94);\n$collapsible-close-transition: opacity 0s cubic-bezier(.25,.46,.45,.94), height 0s cubic-bezier(.25,.46,.45,.94);\n$collapsible-content-open-transition: opacity 0.6s cubic-bezier(0.04, 0, 0.2, 1), transform 0.4s cubic-bezier(0.04, 0, 0.2, 1);\n$collapsible-content-close-transition: transform 0s cubic-bezier(.25,.46,.45,.94);\n\n/*Tab style*/\n.collapsibles-content-wrapper {\n  padding-top: calc($gutter / 2);\n  text-align: left;\n}\n\n/*Expandable box style*/\n.collapsibles-wrapper--border-bottom {\n  border-bottom: $borderWidth solid;\n  border-bottom-color: $colorBorder;\n}\n\n.collapsibles-wrapper--border-bottom + .collapsibles-wrapper--border-bottom .collapsible-trigger-btn--borders {\n  border-top: 0;\n}\n\n.product-block--tab + .product-block--tab .collapsible-trigger-btn--borders {\n  border-top: 0;\n}\n\n.collapsible-trigger {\n  color: inherit;\n  position: relative;\n}\n\n.collapsible-trigger__icon {\n  display: block;\n  position: absolute;\n  right: 0;\n  top: 50%;\n  width: $collapsible-trigger-icon-width;\n  height: $collapsible-trigger-icon-width;\n  transform: translateY(-50%);\n\n  & .icon {\n    display: block;\n    width: $collapsible-trigger-icon-width;\n    height: $collapsible-trigger-icon-width;\n    transition: all 0.1s ease-in;\n  }\n}\n\n.collapsible-trigger--inline {\n  padding: 11px 0 11px 35px;\n\n  & .collapsible-trigger__icon {\n    right: auto;\n    left: 0;\n  }\n}\n\n.collapsible-trigger__icon--circle {\n  border: $borderWidth solid;\n  border-color: $colorBorder;\n  border-radius: 50%;\n  width: 24px;\n  height: 24px;\n  text-align: center;\n\n  & .icon {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n}\n\n.collapsible-trigger.is-open .collapsible-trigger__icon > .icon-chevron-down {\n  transform: scaleY(-1);\n}\n\n.collapsible-trigger.is-open .collapsible-trigger__icon .icon-plus,\n.collapsible-trigger .collapsible-trigger__icon .icon-minus {\n  display: none;\n}\n\n.collapsible-trigger.is-open .collapsible-trigger__icon .icon-minus {\n  display: block;\n}\n\n.collapsible-content {\n  transition: $collapsible-close-transition;\n\n  &.is-open {\n    visibility: visible;\n    opacity: 1;\n    transition: $collapsible-open-transition;\n  }\n}\n\n.collapsible-content--all {\n  visibility: hidden;\n  overflow: hidden;\n  backface-visibility: hidden;\n  opacity: 0;\n  height: 0;\n\n  & .collapsible-content__inner {\n    transform: translateY(15px);\n  }\n\n  & .collapsible-content__inner--no-translate {\n    transform: translateY(0);\n  }\n}\n\n@media (--small) {\n  .collapsible-content--small {\n    visibility: hidden;\n    backface-visibility: hidden;\n    opacity: 0;\n    height: 0;\n\n    & .collapsible-content__inner {\n      transform: translateY(40px);\n    }\n\n    & .collapsible-content__inner--no-translate {\n      transform: translateY(0);\n    }\n  }\n}\n\n.collapsible-content__inner {\n  opacity: 0;\n  transition: $collapsible-content-close-transition;\n\n  @nest .is-open & {\n    opacity: 1;\n    transform: translateY(0);\n    transition: $collapsible-content-open-transition;\n  }\n}\n\n.rte.collapsible-content__inner--faq {\n  padding-bottom: $gutter;\n}\n\n.collapsible-label__closed {\n  @nest .collapsible-trigger[aria-expanded=\"true\"] & {\n    display: none;\n  }\n}\n\n.collapsible-label__open {\n  display: none;\n\n  @nest .collapsible-trigger[aria-expanded=\"true\"] & {\n    display: inline-block;\n  }\n}\n",".pswp {\n  display: none;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n  overflow: hidden;\n  -ms-touch-action: none;\n  touch-action: none;\n  z-index: 1500;\n  -webkit-text-size-adjust: 100%;\n  -webkit-backface-visibility: hidden;\n  outline: none; }\n\n.pswp img {\n  max-width: none;\n}\n\n/* style is added when JS option showHideOpacity is set to true */\n.pswp--animate_opacity {\n  /* 0.001, because opacity:0 doesn't trigger Paint action, which causes lag at start of transition */\n  opacity: 0.001;\n  will-change: opacity;\n  transition: opacity 333ms cubic-bezier(0.4, 0, 0.22, 1); }\n\n.pswp--open {\n  display: block; }\n\n.pswp--zoom-allowed .pswp__img {\n  cursor: zoom-in; }\n\n.pswp--zoomed-in .pswp__img {\n  cursor: grab; }\n\n.pswp--dragging .pswp__img {\n  cursor: grabbing; }\n\n/*\n  Background is added as a separate element.\n  As animating opacity is much faster than animating rgba() background-color.\n*/\n.pswp__bg {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background: $colorBody;\n  opacity: 0;\n  transform: translateZ(0);\n  -webkit-backface-visibility: hidden;\n  will-change: opacity; }\n\n.pswp__scroll-wrap {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: hidden; }\n\n.pswp__container,\n.pswp__zoom-wrap {\n  -ms-touch-action: none;\n  touch-action: none;\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0; }\n\n/* Prevent selection and tap highlights */\n.pswp__container,\n.pswp__img {\n  user-select: none;\n  -webkit-tap-highlight-color: transparent;\n  -webkit-touch-callout: none; }\n\n.pswp__zoom-wrap {\n  position: absolute;\n  width: 100%;\n  transform-origin: left top;\n  /* for open/close transition */\n  transition: transform 333ms cubic-bezier(0.4, 0, 0.22, 1); }\n\n.pswp__bg {\n  will-change: opacity;\n  /* for open/close transition */\n  transition: opacity 333ms cubic-bezier(0.4, 0, 0.22, 1); }\n\n.pswp--animated-in .pswp__bg,\n.pswp--animated-in .pswp__zoom-wrap {\n  transition: none; }\n\n.pswp__container,\n.pswp__zoom-wrap {\n  -webkit-backface-visibility: hidden; }\n\n.pswp__item {\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  overflow: hidden; }\n\n.pswp__img {\n  position: absolute;\n  width: auto;\n  height: auto;\n  top: 0;\n  left: 0; }\n\n/*\n  stretched thumbnail or div placeholder element (see below)\n  style is added to avoid flickering in webkit/blink when layers overlap\n*/\n.pswp__img--placeholder {\n  -webkit-backface-visibility: hidden; }\n\n.pswp--ie .pswp__img {\n  width: 100% !important;\n  height: auto !important;\n  left: 0;\n  top: 0; }\n\n/*\n  Error message appears when image is not loaded\n  (JS option errorMsg controls markup)\n*/\n.pswp__error-msg {\n  position: absolute;\n  left: 0;\n  top: 50%;\n  width: 100%;\n  text-align: center;\n  line-height: 16px;\n  margin-top: -8px;\n  color: #CCC; }\n\n.pswp__error-msg a {\n  color: #CCC;\n  text-decoration: underline; }\n\n.pswp__button {\n  position: relative;\n\n  /*Because JS listens to click on button element itself*/\n  &:after {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n  }\n}\n\n.pswp__button--arrow--left .icon,\n.pswp__button--arrow--right .icon {\n  width: 13px;\n  height: 13px;\n  margin: 8px;\n}\n\n.pswp__button[disabled] {\n  opacity: 0;\n  pointer-events: none;\n}\n\n.pswp__ui {\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  bottom: $gutter;\n  left: 0;\n  right: 0;\n  transform: translateY(0);\n  transition: transform 0.25s 0.6s;\n\n  & .btn {\n    margin: 15px;\n  }\n}\n\n.pswp__ui--hidden {\n  transform: translateY(150%);\n  transition: transform 0.25s;\n}\n\n/* Fixes for iOS15 */\n/* See https://gist.github.com/dimsemenov/0b8c255c0d87f2989e8ab876073534ea */\n\nhtml.pswp-open-in-ios,\nhtml.pswp-open-in-ios body {\n  background: #444;\n  height: var(--window-inner-height);\n  overflow: hidden;\n  box-sizing: border-box;\n}\n\n/* Hide page content via CSS when PhotoSwipe opens */\n.pswp-open-in-ios body > * {\n  display: none; \n}\n.pswp-open-in-ios body .pswp.pswp--open {\n  display: block; \n} ","/*Model viewer controls*/\n.shopify-model-viewer-ui {\n  & .shopify-model-viewer-ui__controls-area {\n    opacity: 1; /*always show controls*/\n    background: $colorBody;\n    border-color: var(--colorTextBodyAlpha005);\n    border-radius: 50px;\n  }\n\n  & .shopify-model-viewer-ui__button {\n    color: $colorTextBody;\n  }\n\n  & .shopify-model-viewer-ui__button--control {\n    &:hover {\n      color: $colorTextBody;\n    }\n\n    &:active,\n    &.focus-visible:focus {\n      color: $colorTextBody;\n      background-color: var(--colorTextBodyAlpha005);\n    }\n\n    &:not(:last-child):after {\n      border-color: var(--colorTextBodyAlpha005);\n    }\n  }\n\n  & .shopify-model-viewer-ui__button--poster {\n    background-color: $colorTextBody;\n    color: $colorBody;\n    border-radius: 100%;\n    border: 1px solid;\n    border-color: var(--colorBodyAlpha05);\n\n    &:hover,\n    &:focus {\n      color: $colorBody;\n    }\n  }\n}\n\n/*View in space button*/\n.product-single__view-in-space {\n  display: block;\n  color: $colorTextBody;\n  background-color:var(--colorTextBodyAlpha008);\n  width: 100%;\n  margin: 40px 0 10px;\n  padding: 5px 10px 10px;\n\n  @nest .slick-dotted.slick-slider + & {\n    margin-top: -10px;\n  }\n\n  &[data-shopify-xr-hidden] {\n    display: none;\n  }\n}\n\n.product-single__view-in-space-text {\n  @mixin smallFontSize;\n  display: inline-block;\n  vertical-align: middle;\n  margin-left: 5px;\n}\n\n/*Model viewer container*/\n.shopify-model-viewer-ui,\n.shopify-model-viewer-ui model-viewer {\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.shopify-model-viewer-ui__button[hidden] {\n  display: none;\n}\n\n.product-single__close-media {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  z-index: 2;\n}\n","$shareButtonHeight: 18px;\n\n.social-sharing {\n  & .icon {\n    height: $shareButtonHeight;\n    width: $shareButtonHeight;\n  }\n}\n\n.social-sharing__link {\n  @mixin smallFontSize;\n  display: inline-block;\n  color: $colorTextBody;\n  border-radius: 2px;\n  margin: 0 18px 0 0;\n  text-decoration: none;\n  font-weight: normal;\n\n  &:last-child {\n    margin-right: 0;\n  }\n\n  @nest html[dir=\"rtl\"] & {\n    margin: 0 0 0 18px;\n\n    &:last-child {\n      margin-left: 0;\n    }\n  }\n}\n\n.social-sharing__title {\n  display: inline-block;\n  vertical-align: middle;\n  padding-right: 15px;\n  padding-left: 3px;\n\n  @nest html[dir=\"rtl\"] & {\n    padding-right: 3px;\n    padding-left: 15px;\n  }\n}\n",".grid-search {\n  margin-bottom: $gutter;\n}\n\n.grid-search__product {\n  position: relative;\n  text-align: center;\n}\n\n/*Force heights for consistency*/\n.grid-search__page-link,\n.grid-search__product-link {\n  height: 280px;\n}\n\n.grid-search__page-link {\n  display: block;\n  background-color: var(--colorBodyLightDim);\n  padding: 20px;\n  color: $colorTextBody;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  &:hover,\n  &:focus {\n    background-color: var(--colorBodyMediumDim);\n  }\n}\n\n.grid-search__page-content {\n  display: block;\n  height: 100%;\n  overflow: hidden;\n}\n\n.grid-search__page-content img {\n  display: block;\n  margin-bottom: 10px;\n  object-fit: cover;\n  height: 100%;\n}\n\n.grid-search__image {\n  display: block;\n  padding: 20px;\n  margin: 0 auto;\n  max-height: 100%;\n  max-width: 100%;\n\n  @media (--medium-up) {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n}\n",".index-section {\n  margin: $indexSectionMarginSmall 0;\n}\n\n.index-section--alt {\n  margin: 0;\n  padding: $indexSectionMarginSmall 0;\n}\n\n.index-section--overflow-scroller {\n  margin-bottom: 30px;\n}\n\n.index-section--small {\n  margin: calc($indexSectionMarginSmall * 0.6) 0;\n}\n\n.index-section--faq {\n  margin-bottom: $indexSectionMarginSmall;\n}\n\n@media (--medium-up) {\n  .index-section {\n    margin: $indexSectionMarginLarge 0;\n  }\n\n  .index-section--alt {\n    margin: 0;\n    padding: $indexSectionMarginLarge 0;\n  }\n\n  .index-section--small {\n    margin: $indexSectionMarginSmall 0;\n  }\n\n  .index-section--faq {\n    margin: $indexSectionMarginSmall 0 calc($indexSectionMarginSmall / 2);\n  }\n}\n\n/*================ Page blocks ================*/\n.page-blocks--flush .page-width {\n  padding: 0;\n}\n\n.page-blocks > div:first-child {\n  & .index-section {\n    margin-top: 0;\n  }\n}\n\n/*================ Featured row section ================*/\n.feature-row-wrapper {\n  direction: ltr;\n  overflow: hidden;\n}\n\n.feature-row {\n  margin: 0 auto;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  @media (--widescreen) {\n    margin: 0 6%;\n  }\n\n  @media (--small) {\n    flex-direction: column;\n    margin: 0;\n  }\n}\n\n@media (--small) {\n  .feature-row--small-none {\n    display: block;\n  }\n}\n\n.feature-row__item {\n  flex: 0 1 57%;\n  margin: 0 auto;\n\n  @media (--small) {\n    flex: 1 1 auto;\n    max-width: 100%;\n    min-width: 100%;\n  }\n}\n\n.feature-row__item--overlap-images {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 0 15px;\n  margin: 0 0 0 -30px;\n\n  @media (--medium-up) {\n    padding: 50px 0;\n    margin: 0 auto;\n  }\n\n  & > * {\n    width: 50%;\n\n    @nest [data-animate_images=\"true\"] & {\n      & .image-wrap {\n        transform: translate(50px, 0);\n        opacity: 0;\n        transition: opacity 0.5s ease, transform 0.5s cubic-bezier(0.2, 0.06, 0.05, 0.95);\n      }\n\n      &:first-child .image-wrap{\n        transform: translate(-50px, 0);\n      }\n    }\n\n    &:first-child {\n      z-index: 1;\n      transform: translate(30px, 30px);\n\n      @media (--medium-up) {\n        transform: translate(50px, 50px);\n      }\n    }\n  }\n\n  @nest [data-animate_images=\"true\"] & {\n    &.aos-animate .image-wrap {\n      transform: translate(0,0);\n      opacity: 1;\n    }\n  }\n\n  & svg {\n    border: 2px solid;\n    border-color: $colorBody;\n  }\n}\n\n.feature-row__text {\n  min-width: 43%;\n  flex: 0 1 43%;\n  padding: 0;\n\n  @media (--small) {\n    order: 2;\n    margin-top: 0;\n    padding: 30px 20px 0;\n    padding-bottom: 0; /*always last element on mobile*/\n  }\n\n  & .rte {\n    margin: 0;\n  }\n\n  & .btn {\n    margin-top: calc($gutter / 2);\n  }\n}\n\n@media (--medium-up) {\n  .feature-row__text--left {\n    padding-right: calc($gutter / 2);\n    padding-left: $gutter;\n  }\n\n  .feature-row__text--right {\n    padding-right: $gutter;\n    padding-left: calc($gutter / 2);\n  }\n}\n\n.feature-row__image {\n  display: block;\n  margin: 0 auto;\n\n  @media (--small) {\n    order: 1;\n  }\n}\n","/*Unique colors for alt coloured sections*/\n.index-section--alt {\n  background-color: $colorAlt;\n  color: $colorAltText;\n}\n\n.index-section--alt a:not(.btn) {\n  color: $colorAltText;\n\n  &:hover,\n  &:focus {\n    color: $colorAltText;\n  }\n}\n\n.index-section--alt .btn {\n  color: $colorAlt;\n  background-color: $colorAltText;\n\n  &:hover,\n  &:active {\n    color: $colorAlt;\n    background-color: $colorAltText;\n  }\n}\n\n.index-section--alt .btn--tertiary {\n  background-color: $colorAlt;\n  border-color: $colorAltText;\n  color: $colorAltText;\n\n  &:hover {\n    background-color: $colorAlt;\n    color: $colorAltText;\n  }\n\n  @nest [data-button_style=\"shadow\"] & {\n    box-shadow: 5px 5px 0 0 $colorAltText;\n\n    &:active {\n      box-shadow: 1px 1px 0 0 $colorAltText;\n      background-color: $colorAlt;\n      color: $colorAltText;\n    }\n  }\n}\n\n.index-section--alt .product-slider.slick-initialized:after {\n  background-color: $colorAltText;\n}\n\n.index-section--alt .placeholder-svg {\n  background-color: #fff;\n}\n",".product-block {\n  margin-bottom: 30px;\n\n  & .hr-separator {\n    margin: 0;\n  }\n}\n\n.product-block--tab + .product-block--tab {\n  margin-top: -30px;\n}\n\n.product-block--sales-point + .product-block--sales-point {\n  margin-top: -25px;\n}\n\n.product-block--header + .product-block--price {\n  margin-top: -20px;\n}\n\n.theme-block {\n  margin-bottom: 30px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n}\n",".footer__social {\n  & li {\n    margin: 5px 5px 0;\n  }\n\n  & a {\n    display: block;\n    border-radius: 100%;\n    border: 2px solid;\n    border-color: $colorBorder;\n    padding: 14px;\n    line-height: 1;\n\n    &:active {\n      color: $colorBtnPrimaryText;\n      background: $colorBtnPrimary;\n    }\n  }\n\n  & .icon {\n    width: 22px;\n    height: 22px;\n\n    @media (--medium-up) {\n      width: 24px;\n      height: 24px;\n    }\n\n    &.icon--wide {\n      width: 40px;\n    }\n  }\n}\n",".cart__item {\n  display: grid;\n  grid-gap: 30px;\n  grid-template-columns: 150px 1fr;\n  grid-template-rows: repeat(2, [row] auto);\n\n  @nest .drawer & {\n    grid-template-columns: 90px 1fr;\n    grid-gap: 20px;\n  }\n\n  @media (--small) {\n    grid-template-columns: 90px 1fr;\n    grid-gap: 20px;\n\n    @nest .drawer & {\n      grid-template-columns: 60px 1fr;\n      grid-gap: 20px;\n    }\n  }\n}\n\n.cart__item--headers {\n  grid-template-rows: 1fr;\n  font-size: 0.85em;\n  border-bottom: $borderWidth solid;\n  border-bottom-color: $colorBorder;\n  padding-bottom: $grid-gutter;\n  margin-bottom: $grid-gutter;\n}\n\n.cart__item--details {\n  display: grid;\n  grid-column: 2;\n  grid-template-columns: 2fr 90px 1fr;\n  align-items: center;\n\n  @media (--small) {\n    grid-template-columns: 90px 1fr;\n  }\n\n  @nest .drawer & {\n    grid-template-columns: 90px 1fr;\n\n    & .cart__item--name {\n      grid-column: 1 / span 3;\n    }\n\n    & .cart__item--qty {\n      grid-column: 1 / span 2;\n    }\n  }\n}\n\n.cart__item--qty {\n  grid-column: 2;\n}\n\n.cart__item--price {\n  grid-column: 3;\n  margin-left: 10px;\n}\n\n@media (--small) {\n  .cart__item--name {\n    grid-column: 1 / span 2;\n  }\n\n  .cart__item--qty {\n    grid-row: 2;\n    grid-column: 1;\n  }\n\n  .cart__item--price {\n    grid-row: 2;\n    grid-column: 2;\n  }\n}\n\n.cart__item-row {\n  margin-bottom: 20px;\n}\n\n.cart__item-sub {\n  flex: 1 1 100%;\n  display: flex;\n  justify-content: space-between;\n  line-height: 1;\n\n  & > div:first-child {\n    margin-right: 10px;\n  }\n}\n\n.cart__terms {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  & label {\n    margin-bottom: 0;\n    text-transform: none;\n    letter-spacing: 0;\n  }\n\n  & a {\n    text-decoration: underline;\n  }\n}\n\n@media (--medium-up) {\n  .cart__terms--right {\n    justify-content: flex-end;\n  }\n}\n\n.cart__checkout-wrapper {\n  margin-top: 20px;\n\n  & .additional-checkout-buttons {\n    margin-top: 12px;\n  }\n\n  & + .cart__item-row {\n    margin-top: 20px;\n  }\n}\n\n.drawer .additional-checkout-buttons {\n  margin: 10px 0;\n\n  & [data-shopify-buttoncontainer] {\n    justify-content: center;\n\n    & > * {\n      height: auto !important;\n    }\n  }\n}\n\n.cart__row [data-shopify-buttoncontainer] {\n  justify-content: flex-end;\n}\n\n@media (--medium-up) {\n  .cart__update + .cart__checkout {\n    margin-left: calc($gutter / 2);\n  }\n}\n\n.cart__product-name {\n  display: block;\n  margin-bottom: 5px;\n\n  @media (--medium-up) {\n    margin-bottom: 10px;\n  }\n}\n\n.cart__price {\n  display: block;\n}\n\n.cart__price--strikethrough {\n  text-decoration: line-through;\n}\n\n.cart__discount {\n  display: block;\n  color: var(--colorSalePrice);\n}\n\n.cart__item--variants {\n  font-size: 0.9em;\n  margin-bottom: 10px;\n\n  & span {\n    font-weight: 700;\n  }\n}\n\n.cart__checkout {\n  width: 100%;\n}\n\n.cart__footer:not(.drawer__footer) {\n  border-top: $borderWidth solid;\n  border-top-color: $colorBorder;\n  padding-top: calc($gutter / 2);\n}\n\n.cart__footer-page {\n  max-width: 450px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.cart__product-name {\n  @mixin largeFontSize;\n  display: block;\n  line-height: 1.4;\n  margin-bottom: 4px;\n}\n\n/*PayPal button has unhelpful z-index*/\niframe.zoid-component-frame {\n  z-index: 1 !important;\n}\n\n.drawer__cart-empty {\n  display: none;\n}\n\n.drawer.is-empty {\n  & .drawer__inner {\n    display: none;\n  }\n\n  & .drawer__cart-empty {\n    display: block;\n  }\n}\n\n.cart__note {\n  font-size: 12px;\n  opacity: 0.8;\n}\n\n.cart__empty-text {\n  display: none;\n\n  @nest .is-empty & {\n    display: block;\n  }\n}\n\n.template-cart .is-empty form {\n  display: none;\n}\n\n/* Cart properties */\n.cart__item--properties {\n  font-size: calc(var(--typeBaseSize) - 2px);\n  margin-bottom: 10px;\n  line-height: 1.3;\n\n  & span {\n    font-weight: 700;\n  }\n}\n","@media (--medium-up) {\n  .product-single__sticky {\n    position: sticky;\n    top: 0;\n  }\n}\n\n.product-single__header {\n  margin-bottom: calc($gutter / 2);\n\n  @media (--medium-up) {\n    margin-top: 60px;\n\n    @nest .screen-layer & {\n      margin-right: 50px; /*account for desktop close icon*/\n    }\n  }\n}\n\n.product-single__title {\n  word-wrap: break-word;\n  margin-bottom: 15px;\n\n  @nest [data-type_product_capitalize=\"true\"] & {\n    text-transform: uppercase;\n  }\n}\n\n.product-single__meta {\n  padding-left: 45px;\n\n  @media (--small) {\n    padding-left: 0;\n    margin-top: calc($gutter / 2);\n  }\n\n  & .social-sharing {\n    margin-top: $gutter;\n    text-align: center;\n\n    @media (--medium-up) {\n      margin-top: $gutter;\n    }\n  }\n}\n\n.product-single__sku,\n.product-single__vendor {\n  @mixin smallFontSize;\n  margin-bottom: calc($gutter / 6);\n\n  &:empty {\n    margin-bottom: 0\n  }\n}\n\n.product-single__variants {\n  display: none;\n\n  @nest .no-js & {\n    display: block;\n    margin-bottom: $gutter;\n  }\n}\n\n.product-image-main {\n  position: relative;\n}\n\n.product__video-wrapper {\n  position: relative;\n  overflow: hidden;\n  max-width: 100%;\n  padding-bottom: 100%; /*apsect ratio overwritten inline*/\n  height: auto;\n  background-color: $colorSmallImageBg;\n\n  & iframe {\n    width: 100%;\n    height: 100%;\n    transition: opacity 0.5s ease-in;\n  }\n\n  /*Put overlay on muted videos because they cannot be interacted with*/\n  &[data-video-style=\"muted\"].loaded:before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 1;\n  }\n\n  /*Unless low power mode requires them to be touched to start*/\n  &.video-interactable:before {\n    display: none;\n  }\n\n  /*Make sure states don't overlap*/\n  &.loaded:after {\n    display: none;\n  }\n\n  &.loading iframe {\n    opacity: 0.01; /*sneaky way to avoid talking to an invisible YT iframe*/\n  }\n\n  &.loaded iframe {\n    opacity: 1;\n  }\n}\n\n.product__video {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n\n  &:not([controls])::-webkit-media-controls {\n    display: none;\n  }\n}\n\n.product-video-trigger {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n/*Images*/\n.product__photos--beside {\n  display: flex;\n  width: 100%;\n}\n\n.product__photos {\n  direction: ltr;\n\n  & a {\n    display: block;\n    max-width: 100%;\n  }\n\n  & img {\n    display: block;\n    margin: 0 auto;\n    max-width: 100%;\n    width: 100%;\n  }\n\n  @media (--small) {\n    width: auto;\n    margin: calc(-$gutter / 2) -$page-width-gutter-small 0; /*top margin same as .product-section .page-content*/\n  }\n}\n\n.product__main-photos {\n  position: relative;\n  overflow: hidden;\n  flex: 1 1 auto;\n\n  @media (--medium-up) {\n    order: 2;\n  }\n\n  & .flickity-page-dots {\n    display: none;\n  }\n\n  @media (--small) {\n    padding-bottom: 25px;\n\n    & .flickity-page-dots {\n      display: block;\n    }\n  }\n}\n\n.product__main-photos-wrapper {\n  position: relative;\n}\n\n/*Hide selectable elements when slide is not active*/\n.flickity-enabled {\n  & .product-main-slide:not(.is-selected) {\n    & button,\n    & video,\n    & iframe,\n    & model-viewer {\n      display: none;\n    }\n  }\n}\n\n.product-main-slide {\n  display: none;\n  width: 100%;\n  overflow: hidden;\n\n  /*Hide all but first slide to prevent page reflows prior to init*/\n  &:first-child {\n    display: block;\n  }\n\n  @nest .flickity-slider & {\n    display: block;\n  }\n\n  @nest [data-images-stacked] & {\n    display: block;\n  }\n\n  @nest .is-fade & {\n    opacity: 0;\n    transition: opacity 0.4s ease;\n\n    &.is-selected {\n      opacity: 1;\n    }\n  }\n}\n\n/* When image sets are enabled, hide slides that aren't in the slider */\n.product-slideshow.flickity-enabled {\n  & .product-main-slide {\n    display: none;\n  }\n\n  & .flickity-viewport .product-main-slide {\n    display: block;\n  }\n}\n\n.product__thumbs {\n  position: relative;\n}\n\n.product__thumbs-sticky {\n  position: sticky;\n  top: calc($gutter / 2);\n}\n\n.product__thumbs--below {\n  margin-top: calc($grid-gutter-small / 2);\n\n  @media (--medium-up) {\n    margin-top: calc($gutter / 2);\n  }\n}\n\n.product__thumbs--beside {\n  @media (--medium-up) {\n    flex: 0 0 80px;\n    max-width: 80px;\n    margin-left: 0;\n    margin-right: calc($gutter / 2);\n  }\n}\n\n.product__thumb-item {\n  & a {\n    display: block;\n\n    &:before {\n      content: none;\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      box-shadow: inset 0 0 0 2px $colorTextBody;\n      z-index: 1;\n    }\n\n    &:focus {\n      outline: none;\n\n      &:before {\n        content: '';\n      }\n    }\n\n    &.is-active:before {\n      content: '';\n    }\n  }\n\n  /*Don't pre-focus thumbnails*/\n  & a:active:before {\n    content: none;\n  }\n\n  &.thumb--current {\n    & a:before {\n      content: '';\n    }\n  }\n\n  @nest .product__thumbs--beside & {\n    margin-bottom: calc($grid-gutter-small / 2);\n\n    @media (--medium-up) {\n      margin-bottom: calc($gutter / 2);\n    }\n  }\n\n  @nest .product__thumbs--below & {\n    margin-right: calc($grid-gutter-small / 2);\n\n    @media (--medium-up) {\n      margin-right: calc($gutter / 2);\n    }\n\n    &:last-child {\n      margin-right: 0;\n    }\n  }\n}\n\n.product__thumb {\n  position: relative;\n  display: block;\n  cursor: pointer;\n}\n\n.product__thumb-icon {\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  background-color: $colorTextBody;\n  border-radius: 100px;\n  padding: 6px;\n  z-index: 1;\n  opacity: 0;\n  transition: opacity 0.5s ease;\n  font-size: 0;\n\n  @nest .aos-animate & {\n    opacity: 1;\n  }\n\n  & .icon {\n    fill: $colorBody;\n    width: 10px;\n    height: 10px;\n\n    @media (--medium-up) {\n      width: 13px;\n      height: 13px;\n    }\n  }\n}\n\n.product__photo-zoom {\n  position: absolute;\n  bottom: 10px;\n  right: 0;\n  margin: 15px;\n  cursor: zoom-in;\n\n  /*Visually hidden, covers full image on desktop*/\n  @media (--medium-up) {\n    opacity: 0;\n    width: 100%;\n    top: 0;\n    left: 0;\n    border-radius: 0;\n    margin: 0;\n\n    & svg,\n    & span {\n      display: none;\n    }\n  }\n}\n\n/*Loading animation for zoom images*/\n.pswp__img--placeholder {\n  overflow: hidden;\n  animation: placeholder-shimmer 1.3s linear 2s infinite;\n  background-size: 400% 100%;\n}\n\n/*Container for prices and optional shipping note*/\n.product-single__prices {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  align-items: center;\n\n  @media (--small) {\n    justify-content: center;\n  }\n\n  & > * {\n    flex: 0 1 auto;\n    padding-right: 15px;\n\n    &:last-child {\n      padding-right: 0;\n    }\n  }\n}\n\n.product__price {\n  @mixin largeFontSize;\n}\n\n/*Sale price color setting, used in multiple areas*/\n.sale-price {\n  color: $colorSalePrice;\n}\n\n/*Used anywhere unit price is visible*/\n.product__unit-price {\n  font-size: 0.8em;\n  opacity: 0.8;\n}\n\n.product__price--compare {\n  text-decoration: line-through;\n}\n\n/*Quantity selector and label*/\n.product__quantity {\n  & input[type=\"number\"] {\n    max-width: 80px;\n\n    @media (--small) {\n      display: block;\n      margin: 0 auto;\n    }\n  }\n}\n\n/*Hide Shopify Payment Buttons if no variant*/\n.add-to-cart[disabled] + .shopify-payment-button {\n  display: none;\n}\n\n.product__policies {\n  font-size: 0.85em;\n}\n\n.shopify-payment-terms {\n  margin: 12px 0;\n\n  &:empty {\n    display: none;\n  }\n\n  @nest .modal & {\n    display: none;\n  }\n\n  @nest .screen-layer & {\n    display: none;\n  }\n}\n\n.product__thumbs--scroller {\n  scrollbar-width: none;\n  scroll-behavior: smooth;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n\n  &::-webkit-scrollbar {\n    height: 0;\n    width: 0;\n  }\n\n  @nest .product__thumbs--below & {\n    overflow-x: scroll;\n    white-space: nowrap;\n    text-align: center;\n  }\n\n  @nest .product__thumbs--beside & {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    overflow-y: scroll;\n  }\n}\n\n/* Hide 'back to collection' section in quick shop */\n.screen-layer-open div[id*=\"collection-return\"] {\n  display: none;\n}\n",".article__date,\n.article__author {\n  margin-bottom: 5px;\n\n  @media (--medium-up) {\n    margin-bottom: 10px;\n  }\n}\n\n.article__featured-image {\n  display: block;\n  margin-bottom: $gutter;\n\n  & img {\n    display: block;\n    margin: 0 auto;\n  }\n}\n\n.article__body {\n  margin-bottom: calc($gutter / 2);\n  @media (--medium-up) {\n    margin-bottom: $gutter;\n  }\n}\n\n.grid--articles {\n  margin-bottom: -calc($gutter * 1.5);\n\n  @media (--medium-up) {\n    margin-bottom: -calc($gutter * 3);\n  }\n}\n\n.article-listing {\n  margin-bottom: calc($gutter * 1.5);\n\n  @media (--medium-up) {\n    margin-bottom: calc($gutter * 3);\n  }\n}\n\n.article__image-wrap {\n  margin: 0 auto;\n  max-width: 850px;\n}\n\n.article__content {\n  margin: 0 auto;\n  max-width: 750px\n}\n\n.article__content-meta {\n  margin-bottom: calc($gutter / 2);\n\n  & > * {\n    margin-bottom: 5px;\n  }\n}\n\n.article__comment {\n  margin-bottom: 20px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n}\n","$image-index: 1;\n$image-overlay-index: 2;\n$content-index: 3;\n\n.site-header--password {\n  color: var(--colorNavText);\n\n  & a,\n  & a:hover {\n    color: var(--colorNavText);\n  }\n\n  @nest .is-light & {\n    color: $colorStickyNavLinks;\n\n    & a,\n    & a:hover {\n      color: $colorStickyNavLinks;\n    }\n  }\n}\n\n.password-page__logo {\n  & h1 {\n    margin-bottom: 0;\n  }\n}\n\n.password-page__logo-image {\n  display: flex;\n  align-items: center;\n}\n\n/*Custom button style for password link*/\n.btn--password {\n  display: block;\n  border-radius: 35px;\n  background-color: transparent;\n  box-shadow: none;\n  color: var(--colorTextBody);\n  border-color: var(--colorTextBody);\n\n  &:hover,\n  &:active {\n    background-color: transparent;\n    color: var(--colorTextBody);\n    border-color: var(--colorTextBody);\n  }\n\n  @nest .is-light & {\n    color: #fff;\n    border-color: #fff;\n\n    &:hover,\n    &:active {\n      color: #fff;\n      border-color: #fff;\n    }\n  }\n\n\n  &:after {\n    content: '';\n  }\n}\n\n.password__lock .icon {\n  position: relative;\n  top: -2px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.icon-shopify-logo {\n  width: 60px;\n  height: 20px;\n}\n\n#LoginModal .modal__close {\n  @media (--small) {\n    padding: 20px;\n  }\n}\n\n#LoginModal .modal__inner {\n  background: $colorBody;\n  color: $colorTextBody;\n  padding: 30px;\n}\n\n.password-admin-link {\n  margin: 0;\n\n  & a {\n    border-bottom: $borderWidth solid !important;\n    border-bottom-color: $colorBorder !important;\n  }\n}\n\n.password-page__footer {\n  margin: 0;\n  padding: calc($gutter / 4) 0;\n\n  @media (--medium-up) {\n    padding: calc($gutter / 2) 0;\n  }\n}\n",".template-giftcard,\n.template-giftcard body {\n  background: $colorBody;\n\n  & a {\n    text-decoration: none;\n  }\n}\n\n.template-giftcard .page-width {\n  max-width: 588px;\n\n  & img,\n  & object,\n  & iframe {\n    max-width: 100%;\n  }\n}\n\n.giftcard-header {\n  padding: calc($gutter * 2) 0;\n  font-size: 1em;\n  text-align: center;\n\n  & a {\n    display: block;\n    margin: 0 auto;\n  }\n}\n\n.template-giftcard .shop-url {\n  display: none;\n}\n\n.giftcard__border {\n  padding: 1.5em;\n  box-shadow: 0 10px 30px rgba(0,0,0,0.3);\n}\n\n.giftcard__content {\n  @mixin clearfix;\n  background-color: $colorBody;\n  color: $colorTextBody;\n}\n\n.giftcard__header {\n  @mixin clearfix;\n  padding: calc($gutter / 2);\n}\n\n.giftcard__title {\n  float: left;\n  margin-bottom: 0;\n}\n\n.giftcard__tag {\n  display: block;\n  float: right;\n  background-color: $colorTextBody;\n  border: 1px solid transparent;\n  color: $colorBody;\n  padding: calc($gutter / 3);\n  border-radius: 4px;\n  font-size: 0.75em;\n  text-transform: uppercase;\n  letter-spacing: .05em;\n  line-height: 1;\n}\n\n.giftcard__tag--active {\n  background: transparent;\n  color: $colorTextBody;\n  border: 1px solid;\n  border-color: $colorBorder;\n}\n\n.giftcard__wrap {\n  position: relative;\n  margin: calc($gutter / 2) calc($gutter / 2) $gutter;\n\n  & img {\n    position: relative;\n    display: block;\n    border-radius: 10px;\n    z-index: 2;\n  }\n}\n\n.giftcard__code {\n  position: absolute;\n  bottom: $gutter;\n  text-align: center;\n  width: 100%;\n  z-index: 50;\n}\n\n.giftcard__code--medium {\n  font-size: .875em;\n}\n\n.giftcard__code--small {\n  font-size: .75em;\n}\n\n.giftcard__code__inner {\n  display: inline-block;\n  vertical-align: baseline;\n  background-color: #fff;\n  padding: .5em;\n  border-radius: 4px;\n  max-width: 450px;\n  -webkit-box-shadow: 0 0 0 1px rgba(0,0,0,0.1);\n  box-shadow: 0 0 0 1px rgba(0,0,0,0.1);\n\n  @nest .giftcard__code--small & {\n    overflow: auto;\n  }\n}\n\n.giftcard__code__text {\n  font-weight: 400;\n  font-size: 1.6em;\n  text-transform: uppercase;\n  border-radius: 2px;\n  border: 1px dashed;\n  border-color: $colorBorder;\n  padding: .4em .5em;\n  display: inline-block;\n  vertical-align: baseline;\n  color: $colorTextBody;\n  line-height: 1;\n\n  @nest .disabled & {\n    color: #999;\n    text-decoration: line-through;\n  }\n}\n\n.giftcard__amount {\n  position: absolute;\n  top: 0;\n  right: 0;\n  color: #fff;\n  font-size: 2.75em;\n  line-height: 1.2;\n  padding: calc($gutter / 2);\n  z-index: 50;\n\n  & strong {\n    display: block;\n    text-shadow: 3px 3px 0 rgba(0,0,0,0.1);\n  }\n}\n\n.giftcard__amount--medium {\n  font-size: 2em;\n}\n\n.template-giftcard .tooltip {\n  display: block;\n  position: absolute;\n  top: -50%;\n  right: 50%;\n  margin-top: 16px;\n  z-index: 3;\n  color: #fff;\n  text-align: center;\n  white-space: nowrap;\n\n  &:before {\n    content: \"\";\n    display: block;\n    position: absolute;\n    left: 100%;\n    bottom: 0;\n    width: 0;\n    height: 0;\n    margin-left: -5px;\n    margin-bottom: -5px;\n    border-left: 8px solid transparent;\n    border-right: 8px solid transparent;\n    border-top: 5px solid #333;\n    border-top: 5px solid rgba(51,51,51,0.9);\n  }\n}\n\n.template-giftcard .tooltip__label {\n  display: block;\n  position: relative;\n  right: -50%;\n  border: none;\n  border-radius: 4px;\n  background: #333;\n  background: rgba(51,51,51,0.9);\n  min-height: 14px;\n  font-weight: 400;\n  font-size: 12px;\n  text-decoration: none;\n  line-height: 16px;\n  text-shadow: none;\n  padding: .5em .75em;\n  margin-left: .25em;\n\n  & small {\n    text-transform: uppercase;\n    letter-spacing: .1em;\n    color: #b3b3b3;\n    font-size: .875em;\n  }\n}\n\n.giftcard__instructions {\n  text-align: center;\n  margin: 0 calc($gutter / 2) $gutter;\n}\n\n.giftcard__actions {\n  position: relative;\n  text-align: center;\n  overflow: hidden;\n  padding-bottom: 1em;\n}\n\n.template-giftcard .action-link {\n  position: absolute;\n  left: calc($gutter / 2);\n  top: 50%;\n  font-size: 0.875em;\n  font-weight: bold;\n  display: block;\n  padding-top: 4px;\n  text-transform: uppercase;\n  letter-spacing: .2em;\n  margin-top: -10px;\n\n  &:hover,\n  &:focus {\n    color: $colorTextBody;\n  }\n}\n\n.template-giftcard .action-link__print {\n  display: inline-block;\n  vertical-align: baseline;\n  width: 17px;\n  height: 17px;\n  vertical-align: middle;\n  margin-right: 10px;\n  opacity: 1;\n  background-repeat: no-repeat;\n  background-position: 0 0;\n  background-image: url('//cdn.shopify.com/s/assets/gift-card/icon-print-164daa1ae32d10d1f9b83ac21b6f2c70.png');\n}\n\n.giftcard__footer {\n  text-align: center;\n  padding: calc($gutter * 2) 0;\n}\n\n#QrCode {\n  & img {\n    padding: $gutter;\n    border-color: $colorBorder;\n    border-radius: 4px;\n    margin: 0 auto $gutter;\n  }\n}\n\n@media (--small) {\n  .giftcard {\n    font-size: 12px;\n  }\n\n  .giftcard-header {\n    padding: $gutter 0;\n  }\n\n  .template-giftcard .header-logo {\n    font-size: 2em;\n  }\n\n  .giftcard__border {\n    padding: calc($gutter / 2);\n  }\n\n  .giftcard__actions {\n    padding: calc($gutter / 2);\n  }\n\n  .giftcard__actions .btn {\n    width: 100%;\n    padding-left: 0;\n    padding-right: 0;\n  }\n\n  .template-giftcard .action-link {\n    display: none;\n  }\n}\n\n/*================ Small width ================*/\n@media screen and (max-width: 400px) {\n  .giftcard__amount strong {\n    text-shadow: 2px 2px 0 rgba(0,0,0,0.1);\n  }\n\n  .giftcard__wrap:before,\n  .giftcard__wrap:after {\n    display: none;\n  }\n\n  .giftcard__code {\n    font-size: .75em;\n  }\n\n  .giftcard__code--medium {\n    font-size: .65em;\n  }\n\n  .giftcard__code--small {\n    font-size: .55em;\n  }\n}\n\n\n/*================ Small height ================*/\n@media screen and (max-height: 800px) {\n  .template-giftcard .header-logo img {\n    max-height: 90px;\n  }\n}\n\n@media print {\n  @page {\n    margin: 0.5cm;\n  }\n\n  p, h2, h3 {\n    orphans: 3;\n    widows: 3;\n  }\n\n  h2, h3 {\n    page-break-after: avoid;\n  }\n\n  html, body {\n    background-color: #fff;\n  }\n\n  .giftcard-header {\n    padding: 10px 0;\n  }\n\n  .giftcard__content,\n  .giftcard__border {\n    border: 0 none;\n  }\n\n  .site-header__logo-link img:nth-child(2),\n  .giftcard__actions,\n  .giftcard__wrap:before,\n  .giftcard__wrap:after,\n  .tooltip,\n  .add-to-apple-wallet {\n    display: none;\n  }\n\n  .giftcard__title {\n    float: none;\n    text-align: center;\n  }\n\n  .giftcard__code__text {\n    color: #555;\n  }\n\n  .template-giftcard .shop-url {\n    display: block;\n  }\n\n  .template-giftcard .logo {\n    color: #58686F;\n  }\n}\n",".slideshow-wrapper {\n  position: relative;\n}\n\n/*Pause button (focusable by keyboard only)*/\n.slideshow__pause:focus {\n  clip: auto;\n  width: auto;\n  height: auto;\n  margin: 0;\n  color: $colorBtnPrimaryText;\n  background-color: $colorBtnPrimary;\n  padding: 10px;\n  z-index: $zindexSkipToContent;\n  transition: none;\n\n  @nest .video-is-playing & {\n    display: none;\n  }\n}\n\n.slideshow__pause-stop {\n  display: block;\n\n  @nest .is-paused & {\n    display: none;\n  }\n}\n\n.slideshow__pause-play {\n  display: none;\n\n  @nest .is-paused & {\n    display: block;\n  }\n}\n\n.slideshow__slide {\n  display: none;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n\n  &:first-child {\n    display: block;\n  }\n\n  @nest .flickity-slider & {\n    display: block;\n  }\n\n  /*Progress bar*/\n  &:after {\n    content: '';\n    position: absolute;\n    background: $colorTextBody;\n    bottom: 0;\n    height: 2px;\n    width: 0%;\n    z-index: 1;\n    transition: width 0s linear 0s;\n  }\n}\n","$z-index-hero-image: 1;\n$z-index-hero-image-overlay: 3;\n$z-index-hero-text: 4;\n$slideshowImageAnimationAmount: 200px;\n$slideshowImageAnimationSpeed: 0.5s;\n\n.hero-wrapper {\n  position: relative;\n}\n\n.hero {\n  position: relative;\n  overflow: hidden;\n  animation: placeholder-shimmer 1.3s linear 0.5s infinite;\n  background-size: 300% 100%;\n\n  &.loaded {\n    animation: none;\n  }\n}\n\n.hero__text-shadow {\n  position: relative;\n  display: inline-block;\n  transform: translateZ(0);\n\n  & > * {\n    position: relative;\n  }\n\n  &:before {\n    @mixin overlay;\n    @mixin heroRadial;\n    opacity: 0;\n    transition: opacity 0.6s cubic-bezier(0.04, 0, 0.2, 1) 0.3s;\n  }\n\n  &.aos-animate:before {\n    opacity: 1;\n  }\n}\n\n.hero__image-wrapper,\n.hero__media {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n}\n\n.hero__image-wrapper--overlay,\n.hero__media--overlay {\n  &:before {\n    @mixin overlay $z-index-hero-image-overlay;\n    @mixin heroScrim;\n\n    @nest .video-interactable & {\n      pointer-events: none;\n    }\n  }\n}\n\n.hero__image {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  z-index: $z-index-hero-image;\n  object-fit: cover;\n  font-family: \"object-fit: cover\";\n}\n\n.hero__media iframe,\n.hero__media video {\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n\n  @nest .video-interactable & {\n    pointer-events: auto;\n  }\n}\n\n/*MP4 sizing*/\n.hero__media video {\n  position: relative;\n  object-fit: cover;\n  object-position: 50% 20%;\n  font-family: \"object-fit: cover\";\n}\n\n/*YouTube iframes need more specific sizing*/\n.hero__media iframe {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 300%;\n  left: -100%;\n  max-width: none;\n\n  /*This min-width may need to change slightly depending on\n  embedded video dimensions. Can do on a per-shop basis*/\n  @media screen and (min-width: 1140px) {\n    width: 100%;\n    height: 300%;\n    left: auto;\n    top: -100%;\n  }\n}\n\n/*Mobile only vimeo play button*/\n.vimeo-mobile-trigger {\n  display: block;\n  position: absolute;\n  width: 100%;\n  z-index: 2;\n  margin-top: 90px;\n\n  @nest .hero__text-content & {\n    margin-top: -130px;\n  }\n\n  & .icon {\n    width: 40px;\n    height: 40px;\n    background-color: #fff;\n    color: #000;\n    border-radius: 50%;\n    padding: 10px;\n  }\n}\n\n.hero__slide-link {\n  display: block;\n  position: relative;\n  height: 100%;\n  color: $colorHeroText;\n  z-index: $z-index-hero-text;\n}\n\n.hero__text-wrap {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  color: $colorHeroText;\n\n  @nest .video-interactable & {\n    pointer-events: none;\n  }\n\n  & .page-width {\n    display: table;\n    width: 100%;\n    height: 100%;\n  }\n}\n\n.hero__text-content {\n  position: relative;\n  padding: 35px 0;\n  z-index: $z-index-hero-text;\n  @media (--medium-up) {\n    padding: 60px 0;\n  }\n}\n\n.hero__title {\n  display: block;\n  margin-bottom: 0;\n  font-size: 40px;\n\n  @media (--medium-up) {\n    font-size: 80px;\n  }\n}\n\n.hero__subtext {\n  margin-top: 20px;\n}\n\n.hero__subtitle {\n  @mixin largeFontSize;\n  vertical-align: middle;\n  margin-top: 5px;\n\n  @media (--medium-up) {\n    display: inline-block;\n    margin-top: 12px;\n    margin-right: 20px;\n  }\n}\n\n.hero__link {\n  display: inline-block;\n\n  @nest .video-interactable & {\n    pointer-events: auto;\n  }\n\n  & .btn {\n    margin-top: 12px;\n  }\n\n  /*Play icon in button*/\n  & .btn .icon-play {\n    position: relative;\n    top: -2px;\n    margin-right: 5px;\n  }\n}\n\n/*Text alignment*/\n.hero__text-content {\n  display: table-cell;\n\n  &.horizontal-left {\n    text-align: left;\n    padding-right: 10%;\n\n    @media (--medium-up) {\n      padding-right: 33%;\n    }\n  }\n\n  &.horizontal-center {\n    text-align: center;\n\n    @media (--medium-up) {\n      padding-left: 40px;\n      padding-right: 40px;\n    }\n  }\n\n  &.horizontal-right {\n    text-align: right;\n    padding-left: 10%;\n\n    @media (--medium-up) {\n      padding-left: 33%;\n    }\n  }\n\n  &.vertical-center {\n    vertical-align: middle;\n    padding-top: 50px;\n\n    @media (--medium-up) {\n      padding-top: 90px;\n    }\n\n    & .hero__subtitle {\n      margin-right: 0; /*because link is a block below subtitle*/\n    }\n\n    & .hero__link {\n      display: block;\n\n      & .btn {\n        margin-top: 15px;\n\n        @media (--medium-up) {\n          margin-top: 20px;\n        }\n      }\n    }\n  }\n\n  &.vertical-top {\n    vertical-align: top;\n  }\n  &.vertical-bottom {\n    vertical-align: bottom;\n  }\n}\n\n.slick-dotted .hero__text-content.vertical-bottom {\n  padding-bottom: 50px;\n}\n\n/*Hero section heights*/\n.hero--450px {\n  height: calc(450px * 0.65);\n}\n.hero--550px {\n  height: calc(550px * 0.65);\n}\n.hero--650px {\n  height: calc(650px * 0.65);\n}\n.hero--750px {\n  height: calc(750px * 0.65);\n}\n.hero--850px {\n  height: calc(850px * 0.65);\n}\n.hero--100vh {\n  height: calc(100vh);\n}\n\n.hero[data-natural] {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\n@media (--medium-up) {\n  .hero--450px {\n    height: 450px;\n  }\n  .hero--550px {\n    height: 550px;\n  }\n  .hero--650px {\n    height: 650px;\n  }\n  .hero--750px {\n    height: 750px;\n  }\n  .hero--850px {\n    height: 850px;\n  }\n}\n\n@media (--small) {\n  .hero--mobile--250px:not([data-natural]) {\n    height: 250px;\n  }\n  .hero--mobile--300px:not([data-natural]) {\n    height: 300px;\n  }\n  .hero--mobile--400px:not([data-natural]) {\n    height: 400px;\n  }\n  .hero--mobile--500px:not([data-natural]) {\n    height: 500px;\n  }\n  .hero--mobile--100vh:not([data-natural]) {\n    height: 90vh;\n  }\n}\n\n/*Align to top of page if first section on page*/\n.index-section--hero:first-child {\n  & [data-align-top] .hero-wrapper {\n    position: relative;\n    z-index: 1;\n  }\n}\n\n[data-animate_images=\"true\"] {\n  /*Default positioning pre-animation*/\n  & .hero__text-shadow:before {\n    opacity: 0;\n  }\n\n  & .hero__text-wrap {\n    opacity: 0;\n    transform: translateY(10px);\n    transition: none;\n\n    @nest .no-js & {\n      opacity: 1;\n    }\n\n    @media (--small) {\n      transform: translateY(7px);\n    }\n  }\n\n  /*Undo animation states for animated hero gif/fade*/\n  & .hero-animated {\n    & .hero__image-wrapper,\n    & .hero__image,\n    & .hero__text-wrap {\n      opacity: 1 !important;\n      transform: none;\n    }\n\n    & .hero__link .btn {\n      opacity: 1;\n    }\n  }\n\n  /*Override lazyload style*/\n  &:not(.animate-out) .hero__image {\n    opacity: 0;\n    transition: none;\n  }\n\n  & .hero__link .btn {\n    opacity: 0;\n    transition: none;\n\n    @nest .no-js & {\n      opacity: 1;\n    }\n  }\n\n  /*Disable animations when not active or fading out*/\n  & .hero__image-wrapper {\n    transform: scale(1.15);\n    opacity: 0;\n    transition: none;\n  }\n\n  & [data-aos=\"hero__animation\"],\n  & .hero .slideshow__slide {\n    & .hero__media,\n    & .hero__image {\n      opacity: 0;\n\n      @nest .no-js & {\n        opacity: 1;\n      }\n    }\n  }\n\n  /*Hero and slideshow shared active animation*/\n  & [data-aos=\"hero__animation\"].loaded.aos-animate,\n  & .hero.loaded .slideshow__slide.is-selected {\n    & .hero__text-wrap {\n      opacity: 1;\n      transform: translateY(0px);\n      transition: opacity 0.4s ease, transform 0.6s cubic-bezier(0.26, 0.54, 0.32, 1);\n    }\n\n    & .hero__text-shadow:before {\n      opacity: 1;\n      transition: all 0.4s ease 0.2s;\n    }\n\n    & .hero__media,\n    & .hero__image,\n    & .hero__image--svg {\n      animation: fade-in-bg 1.5s cubic-bezier(0.26, 0.54, 0.32, 1) 0s forwards;\n      transition: none;\n    }\n\n    & .hero__image-wrapper {\n      opacity: 1;\n      transform: scale(1);\n      transition: transform 1s cubic-bezier(0.18, 0.63, 0.25, 1),opacity 0.7s ease;\n    }\n\n    & .hero__link .btn {\n      animation: fade-in 1s ease 0.6s forwards;\n    }\n  }\n\n  /*Collection header image*/\n  & [data-aos=\"hero__animation\"] .collection-hero__image {\n    opacity: 0;\n\n    @nest .no-js & {\n      opacity: 1;\n    }\n  }\n\n  & [data-aos=\"hero__animation\"].aos-animate .collection-hero__image {\n    animation: fade-in-bg 1.5s cubic-bezier(0.26, 0.54, 0.32, 1) 0s forwards;\n    transition: none; /*fixes safari animation conflict*/\n  }\n\n  /*Slideshow fading out animation*/\n  & .hero .slideshow__slide.animate-out {\n    & .hero__image-wrapper {\n      opacity: 0;\n      transform: scale(1);\n      transition: transform $slideshowImageAnimationSpeed ease-in 0.55s, opacity $slideshowImageAnimationSpeed ease-in 0.55s;\n    }\n  }\n}\n\n/*No image animation if product screen is closing*/\n[data-animate_images=\"false\"] {\n  & .slideshow-refresh[data-aos=\"hero__animation\"].loaded {\n    & .hero__media,\n    & .hero__image {\n      animation: none;\n      opacity: 1;\n    }\n  }\n\n  & .hero__text-wrap {\n    opacity: 0;\n  }\n\n  & .slideshow__slide.is-selected .hero__text-wrap,\n  & .video-parent-section .hero__text-wrap {\n    opacity: 1;\n  }\n\n  /*Undo animation states for animated hero gif/fade*/\n  & .hero-animated {\n    & .hero__image-wrapper,\n    & .hero__image,\n    & .hero__text-wrap {\n      opacity: 1 !important;\n      transform: none;\n    }\n\n    & .hero__link .btn {\n      opacity: 1;\n    }\n  }\n}\n",".animated__slide {\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  overflow: hidden;\n\n  &:first-child {\n    display: block;\n  }\n}\n\n.animated__slide--active {\n  opacity: 1;\n}\n\n/*Fading style animations*/\n.hero-animated[data-style=\"fading\"] {\n  & .animated__slide--inactive {\n    opacity: 0;\n    animation: hero-animate-out 0.5s linear forwards;\n    z-index: 1;\n  }\n\n  & .animated__slide--active {\n    animation: hero-animate 4s cubic-bezier(0.12, 0.63, 0.6, 0.74) forwards;\n    z-index: 2;\n  }\n\n  @media (--small) {\n    & .animated__slide--inactive {\n      animation-name: hero-animate-out-small;\n    }\n\n    & .animated__slide--active {\n      animation-name: hero-animate-small;\n    }\n  }\n}\n","$collectionHeroLarge: 550px;\n$collectionHeroSmall: 330px;\n\n.collection-hero {\n  position: relative;\n  width: 100%;\n  height: $collectionHeroSmall;\n  overflow: hidden;\n  background: $colorLargeImageBg;\n  margin-bottom: calc($gutter * 0.75);\n\n  @media (--medium-up) {\n    height: $collectionHeroLarge;\n    margin-bottom: calc($gutter * 1.5);\n  }\n}\n\n.collection-hero__image {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.collection-hero__content {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  display: flex;\n  align-items: center;\n\n  & .page-width {\n    width: 100%;\n  }\n\n  & .section-header--hero {\n    margin-bottom: 0;\n  }\n}\n",".collection-filters {\n  margin-bottom: calc($gutter * 0.75);\n\n  @media (--medium-up) {\n    margin-bottom: calc($gutter * 1.5);\n  }\n}\n\n.collection-filter__wrapper {\n  overflow: hidden;\n  max-width: $page-width;\n  margin: 0 auto;\n}\n\n.collection-filter__scrollable {\n  display: flex;\n  flex-wrap: nowrap;\n  overflow-x: auto;\n  overflow-y: hidden;\n\n  @media (--medium-up) {\n    display: block;\n    text-align: center;\n    margin-bottom: -$gutter;\n  }\n}\n\n.collection-filter__group {\n  flex: 1 0 auto;\n  max-width: 50%;\n\n  @media (--medium-up) {\n    display: inline-block;\n    vertical-align: top;\n    max-width: 28%;\n    margin-bottom: $gutter;\n    text-align: left;\n  }\n\n  &[data-type=\"color_group\"] {\n    flex: 1 0 50%;\n  }\n}\n\n.collection-filter__group--price {\n  max-width: none;\n}\n\n.collection-filter__inner {\n  padding: 0 $gutter;\n\n  @media (--small) {\n    padding: 0 $page-width-gutter-small;\n    border-right: 2px solid;\n    border-right-color: $colorBorder;\n    height: 100%;\n\n    @nest .collection-filter__group:last-child & {\n      border-right: 0;\n    }\n  }\n}\n\n.collection-filter__title {\n  @mixin largeFontSize;\n  margin-bottom: 10px;\n\n  @nest [data-type_product_capitalize=\"true\"] & {\n    text-transform: uppercase;\n  }\n\n  [dir=\"rtl\"] & {\n    text-align: right;\n  }\n}\n\n/*Dropdown filters/sorting*/\n.collection-dropdowns {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n\n  & select {\n    display: block;\n    width: 100%;\n  }\n\n  @nest .collection-filter__wrapper + & {\n    margin-top: $gutter;\n  }\n}\n\n.collection-dropdowns__item {\n  flex: 0 1 20%;\n  margin: 0 calc($gutter / 2);\n\n  @media (--small) {\n    flex: 0 1 40%;\n  }\n}\n\n.image-filter__wrapper ul {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 10px;\n\n  label {\n    height: 100%;\n    align-items: flex-start;\n    border: 1px solid transparent;\n\n    &:active,\n    &:hover,\n    &:focus-within {\n      border-color: var(--colorTextBody);\n    }\n  }\n\n  .tag__text {\n    margin-left: 0;\n  }\n}\n\n.image-filter__wrapper .tag--active label {\n  border-color: var(--colorTextBody);\n  border: 2px solid;\n}\n\n.image-filter__image-wrapper {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  text-align: center;\n}\n",".site-header__logo .logo--has-inverted {\n  @nest .is-light & {\n    opacity: 0;\n    visibility: hidden;\n    overflow: hidden;\n    height: 0;\n  }\n}\n\n.site-header__logo .logo--inverted {\n  opacity: 0;\n  visibility: hidden;\n  overflow: hidden;\n  height: 0;\n\n  @nest .is-light & {\n    opacity: 1;\n    visibility: visible;\n    height: auto;\n  }\n}\n\n/*================ Text Shop Name ================*/\n.site-header__logo {\n  font-size: 25px;\n\n  @media (--small) {\n    font-size: 20px;\n    text-align: center;\n  }\n}\n\n.site-header__logo a,\n.header-logo a {\n  color: $colorNavText;\n\n  @nest .is-light & {\n    color: $colorStickyNavLinks;\n\n    &:hover {\n      color: $colorStickyNavLinks;\n    }\n  }\n}\n\n.site-nav__dropdown-link {\n  display: block;\n  white-space: nowrap;\n  padding: 8px 15px;\n  font-size: 16px;\n}\n","$tagActiveIconSize: 16px;\n$tagActiveIconSizeActive: 10px;\n\n.tags--vertical {\n  list-style: none outside;\n  margin: 0;\n  padding: 0;\n\n  & li {\n    margin-bottom: 5px;\n\n    @media (--medium-up) {\n      margin-bottom: 10px;\n    }\n  }\n}\n\n.tag--active {\n  font-weight: 900;\n}\n\n/*Show more/less button*/\n.tags-toggle {\n  @mixin smallFontSize;\n  width: auto;\n  padding: 0 0 2px;\n  margin: 10px 0;\n  border-bottom: 1px solid currentColor;\n\n  @media (--medium-up) {\n    margin: 15px 0;\n  }\n}\n\n.tag-list {\n  margin-bottom: 0;\n}\n\n.tag-list--active-tags {\n  margin-bottom: $gutter;\n\n  &:empty {\n    display: none;\n  }\n}\n\n.tag-list a,\n.tag-list label {\n  @mixin smallFontSize;\n  cursor: pointer;\n  position: relative;\n  display: inline-block;\n}\n\n.tag-list label:hover,\n.tag:focus-within label {\n  text-decoration: underline;\n  text-underline-offset: 2px;\n}\n\n.tag-list--checkboxes .tag--active a:after,\n.tag--active .tag__checkbox:after,\ninput:checked ~ .tag__checkbox:after {\n  background-color: $colorTextBody;\n  border-color: $colorTextBody;\n}\n\n.tag--remove {\n  position: relative;\n  display: inline-block;\n  margin: 0 10px 0 0;\n\n  & a {\n    text-align: left;\n    padding-right: 40px !important;\n  }\n\n  /*X icon sits over button, not in it*/\n  & .icon {\n    position: absolute;\n    right: 10px;\n    top: 50%;\n    transform: translateY(-50%);\n    pointer-events: none;\n    color: $colorBtnPrimaryText;\n  }\n}\n\n/*Color swatches in sidebar*/\n.tag-list--swatches {\n  margin-top: 2px;\n  margin-left: -4px;\n\n  & li {\n    display: inline-block;\n    margin: 0 5px 5px 0;\n  }\n}\n\nlabel.tag__checkbox-wrapper {\n  display: flex;\n}\n\n.tag__checkbox {\n  position: relative;\n  padding-left: 25px;\n\n  &:before,\n  &:after {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 50%;\n    transform: translateY(-50%);\n\n    @nest [dir=\"rtl\"] & {\n      left: auto;\n      right: 0;\n    }\n  }\n\n  &:before {\n    border: 1px solid;\n    border-color: var(--colorBorder);\n    height: $tagActiveIconSize;\n    width: $tagActiveIconSize;\n  }\n\n  &:after {\n    height: $tagActiveIconSizeActive;\n    width: $tagActiveIconSizeActive;\n    left: 3px;\n  }\n}\n\n.tag__input {\n  position: absolute;\n  opacity: 0;\n  cursor: pointer;\n  height: 0;\n  width: 0;\n}\n","$label-bottom-margin: 12px;\n\n.variant-input-wrap {\n  border: 0;\n  padding: 0;\n  margin: 0 0 -$label-bottom-margin;\n  position: relative;\n\n  & input {\n    @mixin visuallyHidden;\n  }\n\n  & label {\n    @mixin smallFontSize;\n    position: relative;\n    display: inline-block;\n    line-height: 1;\n    font-weight: normal;\n    padding: 15px 18px;\n    margin: 0 8px $label-bottom-margin 0;\n    font-style: normal;\n    text-transform: none;\n    border-radius: 100px;\n    color: $colorTextBody;\n    background-color: transparent;\n    overflow: hidden;\n\n    &.color-swatch {\n      height: calc(var(--typeBaseSize) + 26px);\n      width: calc(var(--typeBaseSize) + 26px);\n    }\n\n    &.disabled {\n      color: $disabledBorder;\n      box-shadow: none;\n    }\n\n    &.disabled.color-swatch {\n      box-shadow: 0 0 0 $borderWidth $disabledBorder;\n    }\n\n    &.disabled:after {\n      position: absolute;\n      content: \"\";\n      left: 50%;\n      top: 0;\n      bottom: 0;\n      border-left: $borderWidth solid;\n      border-color: $disabledBorder;\n      transform: rotate(45deg);\n    }\n  }\n\n  /*selected style*/\n  & input[type='radio']:checked + label {\n    box-shadow: 0 0 0 $borderWidth $colorTextBody;\n\n    /*Remove thin background line bleed fix*/\n    &:after {\n      content: none;\n    }\n  }\n}\n\n.variant-input {\n  display: inline-block;\n\n  /*Firefox bug fix*/\n  @nest select & {\n    display: block;\n  }\n\n  label:focus {\n    box-shadow: 0 0 0 2px rgba(0,0,0,0.8);\n  }\n}\n\n.variant-wrapper + .variant-wrapper {\n  margin-top: 25px;\n}\n\n.no-js .variant-wrapper {\n  display: none;\n}\n\n.variant-wrapper--dropdown {\n  display: inline-block;\n  max-width: 100%;\n  margin-right: calc($gutter / 2);\n}\n\n.variant__label {\n  display: block;\n  margin-bottom: 15px;\n  cursor: default;\n}\n","/*Extra left/right padding when one-per row*/\n@media (--small) {\n  .grid-product--padded .grid-product__content {\n    padding-left: 10px;\n    padding-right: 10px;\n\n    @nest [data-product_image_scatter=\"true\"] & {\n      padding-left: 0;\n      padding-right: 0;\n    }\n  }\n}\n\n.grid-product__content {\n  position: relative;\n  margin-bottom: calc($gutter / 2);\n  text-align: center;\n\n  @media (--medium-up) {\n    margin-bottom: $gutter;\n\n    @nest .grid-product__hover-details & {\n      margin-bottom: 0;\n    }\n  }\n}\n\n.grid-product__link {\n  display: block;\n  overflow: hidden;\n}\n\n/* For sold out products grayed out state */\n.grid-product__link--disabled .image-wrap {\n  opacity: 0.5;\n}\n\n.grid-product__image {\n  display: block;\n  margin: 0 auto;\n  width: 100%;\n}\n\n/* Product title/price */\n.grid-product__meta {\n  position: relative;\n  padding: 10px 0;\n  line-height: calc(var(--typeBaseLineHeight) - 0.1);\n\n  @nest .overflow-scroller & {\n    padding-bottom: 0;\n  }\n\n  @media (--small) {\n    @nest .small--grid--flush & {\n      padding: 10px;\n    }\n  }\n}\n\n@media (--medium-up) {\n  @media (any-hover: hover) {\n    .grid-product__colors,\n    .grid-product__meta,\n    .grid-product__tag {\n      @nest .grid-product__hover-details & {\n        opacity: 0;\n        transform: translateY(7px);\n        transition: all 0.15s cubic-bezier(0.23, 0.55, 0.49, 1.01);\n      }\n\n      @nest .grid-product__hover-details:hover & {\n        transform: translateY(0px);\n        opacity: 1;\n      }\n    }\n  }\n}\n\n.grid-product__title {\n  @mixin largeFontSize;\n\n  @nest [data-type_product_capitalize=\"true\"] & {\n    text-transform: uppercase;\n  }\n}\n\n.grid-product__vendor {\n  @mixin smallFontSize;\n  margin-top: 3px;\n}\n\n.grid-product__price {\n  @mixin smallFontSize;\n  margin-top: 3px;\n}\n\n.grid-product__price--original {\n  margin-right: 5px;\n}\n\n/*Product sale and sold out tag*/\n.grid-product__tag {\n  @mixin smallFontSize;\n  position: absolute;\n  top: 0;\n  right: 0;\n  line-height: 1;\n  padding: 6px 6px 6px 8px;\n  background-color: $colorBtnPrimary;\n  color: $colorBtnPrimaryText;\n  z-index: 1;\n  transition: opacity 0.4s ease;\n\n  @media (--medium-up) {\n    padding: 7px 9px 7px 11px;\n  }\n}\n\n.grid-product__tag--sale {\n  background-color: $colorSaleTag;\n  color: $colorSaleTagText;\n}\n\n/*See all (mobile overflow)*/\n.grid-product__see-all {\n  display: inline-block;\n  padding: calc($gutter / 2);\n  text-align: center;\n  border: $borderWidth solid;\n  border-color: $colorBorder;\n  margin-top: -60px; /*approx of what title+price is*/\n}\n\n/*Unload*/\n.grid-product {\n  &.aos-animate.unload {\n    opacity: 0;\n    transition-duration: 0.3s;\n    animation: grid-product__loading 1.5s ease infinite 1.5s;\n  }\n}\n\n.grid-product__colors {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  line-height: $colorSwatchCollectionSize;\n\n  @media (--medium-up) {\n    line-height: $colorSwatchCollectionSizeLarge;\n  }\n\n  @nest .overflow-scroller & {\n    padding-top: 10px;\n  }\n\n  @nest .grid-product__hover-details & {\n    margin-bottom: 5px;\n  }\n}\n\n/*Product image slider*/\n.product-slider {\n  &:not(.flickity-enabled) {\n    & .product-slide {\n      display: none;\n    }\n\n    & .product-slide:first-child {\n      display: block;\n    }\n  }\n\n  &.flickity-enabled .product-slide {\n    opacity: 0;\n    transition: opacity 0s ease 0.3s;\n    width: 100%;\n    height: 100%;\n\n    &:first-child {\n      opacity: 1;\n    }\n  }\n\n  & .product-slide.is-selected {\n    opacity: 1;\n    transition: none;\n  }\n}\n\n.product-slider.flickity-enabled:after {\n  content: '';\n  position: absolute;\n  background-color: $colorTextBody;\n  bottom: -2px;\n  height: 2px;\n  width: 0;\n  left: 0;\n  z-index: 1;\n  animation: progressBar 1350ms infinite linear; /*duration updated inline*/\n}\n\n/*Remove lazyload + aos fade animation to prevent flash on init/destroy*/\n.product-slider--init {\n  &.is-draggable .flickity-viewport {\n    cursor: pointer;\n  }\n\n  & img,\n  & .grid__image-ratio {\n    opacity: 1 !important;\n    animation: none !important;\n  }\n}\n\n.product-slide .placeholder-svg {\n  opacity: 1;\n}\n",".sales-points {\n  list-style: none;\n  padding: 0;\n  margin: 25px 0;\n\n  @nest .quick-add-modal & {\n    display: none;\n  }\n}\n\n.sales-point {\n  display: block;\n  margin-bottom: 10px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n\n  & .icon {\n    position: relative;\n    width: 25px;\n    height: 25px;\n    margin-right: 10px;\n\n    @nest [dir=\"rtl\"] & {\n      margin-right: 0;\n      margin-left: 10px;\n    }\n  }\n}\n\n@media (--small) {\n  .sales-point .icon-and-text {\n    justify-content: center;\n  }\n}\n","/*Inventory indicator*/\n@keyframes inventory-pulse {\n  0% {\n    opacity: 0.5;\n  }\n  100% {\n    transform: scale(2.5);\n    opacity: 0;\n  }\n}\n\n.icon--inventory {\n  &:before,\n  &:after {\n    width: 9px;\n    height: 9px;\n    background: #54c63a;\n    border-radius: 9px;\n    position: absolute;\n    left: 0;\n    top: 0;\n    content: '';\n    margin: 8px;\n  }\n\n  &:before {\n    animation: inventory-pulse 2s linear infinite;\n  }\n\n  @nest .inventory--low & {\n    &:before,\n    &:after {\n      background: #F4AF29;\n    }\n  }\n}\n","$productImageOffset: 20px;\n$productImageOffsetLarge: 30px;\n\n[data-product_image_scatter=\"true\"] {\n  @media (--medium-up) {\n    & .grid--scattered-large-2 {\n      & .grid-product:nth-child(2n+2) {\n        padding-top: $productImageOffsetLarge;\n      }\n    }\n\n    & .grid--scattered-large-3 {\n      & .grid-product:nth-child(3n+2) {\n        padding-top: $productImageOffsetLarge;\n      }\n    }\n\n    & .grid--scattered-large-4 {\n      & .grid-product:nth-child(2n+2) {\n        padding-top: $productImageOffsetLarge;\n      }\n    }\n  }\n\n  @media (--small) {\n    & .grid--scattered-small-1 {\n      & .grid-product:nth-child(2n) {\n        padding-left: calc($grid-gutter-small * 2);\n        padding-right: 10px;\n      }\n\n      & .grid-product:nth-child(2n+1) {\n        padding-left: calc($grid-gutter-small + 10px);\n        padding-right: calc($grid-gutter-small * 2);\n      }\n    }\n\n    & .grid--scattered-small-2 {\n      & .grid-product:nth-child(2n+2) {\n        padding-top: $productImageOffset;\n      }\n    }\n  }\n\n  /*Product page thumbnails*/\n  @media (--medium-up) {\n    & .product__thumbs--beside {\n      flex: 0 0 100px;\n      max-width: 100px;\n      margin-top: 20px;\n      margin-right: 0;\n      transform: translateX(40px);\n      z-index: 1;\n\n      & .product__thumb-item {\n        margin-right: 20px;\n      }\n\n      & .product__thumb-item:nth-child(2n+2) {\n        margin-right: 0;\n        margin-left: 20px;\n      }\n    }\n  }\n}\n",".color-swatch {\n  position: relative;\n  display: block;\n  text-indent: -9999px;\n  direction: ltr;\n  overflow: visible;\n  margin: 0 1px 4px;\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  width: 2.5em;\n  transition: box-shadow 0.2s ease;\n  border-radius: 100px;\n\n  &:before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 2;\n    border: 3px solid;\n    border-color: $colorBody;\n    border-radius: 100px;\n    box-shadow: 0 0 1px 1px rgba(0,0,0,0.15) inset;\n  }\n\n  /*Cover thin background line bleed*/\n  &:not(.disabled):after {\n    content: '';\n    position: absolute;\n    top: -1px;\n    left: -1px;\n    right: -1px;\n    bottom: -1px;\n    z-index: 3;\n    border: 2px solid;\n    border-color: $colorBody;\n    border-radius: 100px;\n  }\n}\n\n.index-section--alt {\n  & .color-swatch:before,\n  & .color-swatch:not(.disabled):after {\n    border-color: $colorAlt;\n  }\n}\n\n/*Product grid direct variant links*/\n.color-swatch--small {\n  width: $colorSwatchCollectionSize;\n  height: $colorSwatchCollectionSize;\n\n  @media (--medium-up) {\n    width: $colorSwatchCollectionSizeLarge;\n    height: $colorSwatchCollectionSizeLarge;\n  }\n\n  &:after {\n    content: none;\n  }\n}\n\n.color-swatch--filter {\n  width: $colorSwatchSidebarSize;\n  height: $colorSwatchSidebarSize;\n}\n\n.tag--swatch {\n  display: inline-block;\n}\n\n.tag--active .color-swatch--filter:after {\n  border-color: $colorBorder;\n}\n\n.tag--show-label {\n  width: 100%;\n\n  label {\n    display: flex;\n    align-items: center;\n  }\n\n  .tag__text {\n    display: block !important;\n    margin-left: 0.5rem;\n    margin-bottom: 4px;\n\n    [dir=\"rtl\"] & {\n      margin-left: 0;\n      margin-right: 0.5rem;\n    }\n  }\n}\n",".featured-collection {\n  overflow-x: hidden;\n}\n\n[data-animate_images=\"true\"] {\n  & [data-aos=\"overflow__animation\"] {\n    transform: translateX(200px);\n    opacity: 0;\n    transition: all 0.4s cubic-bezier(0.04, 0, 0.2, 1) 0.3s;\n\n    @media (--medium-up) {\n      transition-duration: 0.6s;\n    }\n\n    @nest .no-js & {\n      opacity: 1;\n      transform: translateX(0);\n      transition-delay: unset;\n    }\n\n    &.aos-animate {\n      opacity: 1;\n      transform: translateX(0);\n      transition-delay: unset;\n    }\n  }\n\n  @media (--small) {\n    & [data-aos=\"overflow__animation__small\"] {\n      transform: translateX(200px);\n      opacity: 0;\n      transition: all 0.4s cubic-bezier(0.04, 0, 0.2, 1) 0.3s;\n\n      @nest .no-js & {\n        opacity: 1;\n        transform: translateX(0);\n        transition-delay: unset;\n      }\n\n      &.aos-animate {\n        opacity: 1;\n        transform: translateX(0);\n        transition-delay: unset;\n      }\n    }\n  }\n}\n\n.overflow-scroll-wrap {\n  position: relative;\n  overflow: hidden;\n}\n\n.overflow-scroller {\n  position: relative;\n  overflow: hidden;\n  overflow-x: scroll;\n  -webkit-overflow-scrolling: touch;\n  padding-bottom: calc($gutter / 2);\n  direction: ltr;\n\n  & .grid {\n    white-space: nowrap;\n    display: flex;\n\n    &:after { /*end spacing fix*/\n      width: 1px;\n      height: 1px;\n      padding-left: 1px;\n    }\n  }\n\n  /*Same sizing as .grid-product--small*/\n  & .grid__item {\n    display: inline-block;\n    float: none;\n    white-space: normal;\n    width: $scrollingProductSmallMobile;\n    flex: 0 0 $scrollingProductSmallMobile;\n    overflow: hidden; /*firefox + slick slider fix*/\n\n    &:first-child {\n      margin-left: $page-width-gutter-small;\n    }\n\n    &:last-child {\n      margin-right: $page-width-gutter-small;\n    }\n\n    @media (--medium-up) {\n      width: $scrollingProductSmallDesktop;\n      flex: 0 0 $scrollingProductSmallDesktop;\n\n      &:first-child {\n        margin-left: 80px;\n      }\n\n      &:last-child {\n        margin-right: 80px;\n      }\n    }\n  }\n\n  & .grid-product--medium {\n    width: $scrollingProductMediumMobile;\n    flex: 0 0 $scrollingProductMediumMobile;\n\n    @media (--medium-up) {\n      width: $scrollingProductMediumDesktop;\n      flex: 0 0 $scrollingProductMediumDesktop;\n    }\n  }\n\n  & .grid-product--large {\n    width: $scrollingProductLargeMobile;\n    flex: 0 0 $scrollingProductLargeMobile;\n\n    @media (--medium-up) {\n      width: $scrollingProductLargeDesktop;\n      flex: 0 0 $scrollingProductLargeDesktop;\n    }\n  }\n\n  & .grid-product__content {\n    margin-bottom: 0;\n  }\n}\n\n/*Override widths if only 3 products*/\n@media (--medium-up) {\n  [data-center-grid] .overflow-scroller .grid {\n    justify-content: center;\n  }\n}\n\n/*Scrolling arrows*/\n$scrollerArrowSize: 60px;\n.overflow-scroller__arrow {\n  position: absolute;\n  top: 50%;\n  margin-top: -80px;\n  width: $scrollerArrowSize;\n  height: $scrollerArrowSize;\n  z-index: 3;\n  transition: transform 0.1s;\n  padding: 10px;\n  border-radius: 100%;\n  min-width: 0;\n\n  @nest .overflow-scroll-wrap:hover & {\n    transition-duration: 0.25s;\n  }\n\n  &[hidden] {\n    display: none;\n  }\n}\n\n[data-button_style=\"shadow\"] .overflow-scroll-wrap .overflow-scroller__arrow {\n  transform: translate(4px, 4px) !important;\n  transition: none;\n}\n\n.overflow-scroller__arrow--left {\n  left: 10px;\n  transform: translateX(-80px);\n\n  & .icon {\n    position: relative;\n    top: -1px;\n    right: 4px;\n\n    @nest [data-button_style=\"shadow\"] & {\n      right: 5px;\n    }\n  }\n}\n\n.overflow-scroller__arrow--right {\n  right: 10px;\n  transform: translateX(80px);\n\n  & .icon {\n    position: relative;\n    top: -1px;\n    left: -3px;\n\n    @nest [data-button_style=\"shadow\"] & {\n      left: -2px;\n    }\n  }\n}\n\n.overflow-scroll-wrap:hover {\n  & .overflow-scroller__arrow--left:not([class*=\"--disable-left\"]),\n  & .overflow-scroller__arrow--right:not([class*=\"--disable-right\"]) {\n    transform: translateX(0);\n  }\n}\n\n/*Loading new products indicator, added to section container*/\n.collection-loading [data-ajax-loader] {\n  position: relative;\n\n  &:after {\n    content: '';\n    display: block;\n    width: 24px;\n    height: 24px;\n    position: absolute;\n    right: 10px;\n    top: 0;\n    border-radius: 50%;\n    border: 3px solid ;\n    border-color: $colorTextBody;\n    border-top-color: transparent;\n    opacity: 0.2;\n    animation: spin 1s infinite linear;\n  }\n}\n\n/*Overscroll indicator on iOS*/\n$loaderSize: 50px;\n$loaderIconSize: 100px; /*defined in SVG*/\n.overscroll-loader {\n  display: none;\n  position: fixed;\n  z-index: 0;\n  width: $loaderSize;\n  height: $loaderSize;\n  top: 20px;\n  left: 50%;\n  margin-left: calc(-$loaderSize / 2);\n  z-index: -1;\n\n  @nest .screen-layer-closing &,\n  .screen-layer-open & {\n    display: block;\n  }\n\n  & .icon {\n    position: relative;\n    display: block;\n    height: $loaderIconSize;\n    width: $loaderIconSize;\n    margin-left: calc(-$loaderSize / 2);\n    margin-top: calc(-$loaderSize / 2);\n    fill: none;\n    transform: scale(0.5);\n  }\n\n  & path {\n    stroke: #fff;\n    stroke-width: 4;\n  }\n\n  & .icon-loader__path {\n    stroke-linecap: round;\n    stroke-dasharray: calc(40 * 3.142 * 1.85);\n    stroke-dashoffset: 200; /*0 is full, adjusted in JS*/\n  }\n\n  & .icon-loader__close {\n    transform: translate(18px,22px);\n  }\n}\n",".skrim-grid {\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  flex-wrap: wrap;\n  margin: 0 -20px;\n\n  @media (--medium-up) {\n    margin-bottom: -$grid-gutter;\n  }\n}\n\n.skrim__item {\n  position: relative;\n  overflow: hidden;\n  width: 40%;\n  width: calc(50% - 20px);\n  margin: 0 10px 20px;\n\n  @media (--medium-up) {\n    margin: 0 calc($grid-gutter / 2) $grid-gutter;\n    width: 20%;\n    width: calc(25% - $grid-gutter);\n  }\n\n  &:after {\n    content: '';\n    display: block;\n    padding-bottom: 100%;\n  }\n}\n\n.skrim__link {\n  display: block;\n  position: absolute;\n  overflow: hidden;\n  height: 100%;\n  width: 100%;\n  border-radius: calc(var(--buttonRadius) * 0.71);\n  will-change: transform;\n\n  @media (--medium-up) {\n    border-radius: var(--buttonRadius);\n  }\n\n  @nest [data-animate_images=\"true\"] & {\n    &:hover,\n    &:focus {\n      & .skrim__overlay {\n        transform: scale(1.03);\n        transition-duration: 0.8s;\n      }\n\n      & .skrim__overlay:before {\n        opacity: 0.3;\n        transition-duration: 0.5s;\n      }\n    }\n  }\n}\n\n.skrim__overlay {\n  position: relative;\n  display: block;\n  overflow: hidden;\n  height: 100%;\n  width: 100%;\n  object-fit: cover;\n  transition: transform 0.5s ease;\n\n  &:after {\n    @mixin overlay;\n    @mixin heroScrim;\n    transition: all 0.5s ease;\n  }\n\n  &:before {\n    @mixin overlay;\n    background: #000;\n    opacity: 0.15;\n    transition: opacity 0.2s ease;\n  }\n\n  & img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n}\n\n.skrim__title {\n  @mixin headerFontStack;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: 0 calc($gutter / 1.6 / 2) 0;\n  color: $colorHeroText;\n  transition: bottom 0.5s ease;\n  display: flex;\n  text-align: center;\n  align-items: center;\n  justify-content: center;\n\n  @media (--medium-up) {\n    margin: 0 calc($gutter/1.6);\n  }\n\n  &:before {\n    @mixin overlay;\n    @mixin heroRadial;\n    background: radial-gradient(rgba(0,0,0,$colorImageOverlayTextShadow) 0%, rgba(0,0,0,0) 40%);\n    margin: 35% -10%;\n  }\n}\n\n.skrim__title--right {\n  left: auto;\n  right: 0;\n}\n\n.skrim__underline-me {\n  position: relative;\n  display: inline-block;\n}\n\n[data-animate_underlines=\"true\"] {\n  & .skrim__underline-me:after {\n    content: '';\n    position: absolute;\n    bottom: -4px;\n    left: 0;\n    width: 0%;\n    border-bottom: $borderWidth solid;\n    border-bottom-color: $colorHeroText;\n    transition: $animate_underlines_duration;\n  }\n\n  & .skrim__link:hover {\n    & .skrim__underline-me:after {\n      width: 100%;\n    }\n\n    & .skrim__title {\n      bottom: 10px;\n    }\n  }\n}\n",".custom-content {\n  display: flex;\n  align-items: stretch;\n  flex-wrap: wrap;\n  width: auto;\n  margin-bottom: -$grid-gutter;\n  margin-left: -$grid-gutter;\n\n  @media (--small) {\n    margin-bottom: -$grid-gutter-small;\n    margin-left: -$grid-gutter-small;\n  }\n}\n\n.custom__item {\n  flex: 0 0 auto;\n  margin-bottom: $grid-gutter;\n  padding-left: $grid-gutter;\n  max-width: 100%;\n\n  @media (--small) {\n    flex: 0 0 auto;\n    padding-left: $grid-gutter-small;\n    margin-bottom: $grid-gutter-small;\n\n    &.small--one-half {\n      flex: 1 0 50%;\n      max-width: 400px;\n      margin-left: auto;\n      margin-right: auto;\n    }\n  }\n\n  & img {\n    display: block;\n  }\n}\n\n.custom__item-inner {\n  position: relative;\n  display: inline-block;\n  text-align: left;\n  max-width: 100%;\n  width: 100%;\n}\n\n.custom__item-inner--video,\n.custom__item-inner--html {\n  display: block;\n}\n\n.custom__item-inner--image {\n  width: 100%;\n}\n\n.custom__item-inner--html img {\n  display: block;\n  margin: 0 auto;\n}\n\n.custom__item-inner--placeholder-image {\n  width: 100%;\n}\n\n/*================ Flex item alignment ================*/\n.align--top-middle {\n  text-align: center;\n}\n\n.align--top-right {\n  text-align: right;\n}\n\n.align--middle-left {\n  align-self: center;\n}\n\n.align--center {\n  align-self: center;\n  text-align: center;\n}\n\n.align--middle-right {\n  align-self: center;\n  text-align: right;\n}\n\n.align--bottom-left {\n  align-self: flex-end;\n}\n\n.align--bottom-middle {\n  align-self: flex-end;\n  text-align: center;\n}\n\n.align--bottom-right {\n  align-self: flex-end;\n  text-align: right;\n}\n",".article__grid-image {\n  display: block;\n  text-align: center;\n  margin-bottom: calc($gutter / 2);\n\n  & img {\n    display: block;\n    top: 0;\n    left: 0;\n  }\n}\n\n.article__date {\n  @mixin smallFontSize;\n}\n\n.article__author {\n  @mixin smallFontSize;\n  font-style: italic;\n}\n\n.article__grid-meta {\n  margin-bottom: $gutter;\n}\n",".logo-bar {\n  text-align: center;\n  margin-bottom: -$gutter;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n}\n\n.logo-bar__item {\n  flex: 0 1 110px;\n  vertical-align: middle;\n  margin: 0 calc($gutter / 2) calc($gutter / 1.5);\n  @media (--medium-up) {\n    flex: 0 1 160px;\n    margin: 0 calc($gutter / 1.5) $gutter;\n  }\n}\n\n.logo-bar__image {\n  display: block;\n  margin: 0 auto;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.logo-bar__link {\n  display: block;\n}\n\n\n[data-animate_images=\"true\"] {\n  & [data-aos=\"logo__animation\"] .logo-bar__item {\n    opacity: 0;\n  }\n\n  & [data-aos=\"logo__animation\"].aos-animate .logo-bar__item {\n    animation: fade-in 0.5s ease 0s forwards;\n  }\n  & [data-aos=\"logo__animation\"].aos-animate .logo-bar__item:nth-child(2) {\n    animation-delay: 0.2s;\n  }\n  & [data-aos=\"logo__animation\"].aos-animate .logo-bar__item:nth-child(3) {\n    animation-delay: 0.4s;\n  }\n  & [data-aos=\"logo__animation\"].aos-animate .logo-bar__item:nth-child(4) {\n    animation-delay: 0.6s;\n  }\n  & [data-aos=\"logo__animation\"].aos-animate .logo-bar__item:nth-child(5) {\n    animation-delay: 0.8s;\n  }\n  & [data-aos=\"logo__animation\"].aos-animate .logo-bar__item:nth-child(6) {\n    animation-delay: 1.0s;\n  }\n  & [data-aos=\"logo__animation\"].aos-animate .logo-bar__item:nth-child(7) {\n    animation-delay: 1.2s\n  }\n  & [data-aos=\"logo__animation\"].aos-animate .logo-bar__item:nth-child(8) {\n    animation-delay: 1.4s;\n  }\n  & [data-aos=\"logo__animation\"].aos-animate .logo-bar__item:nth-child(9) {\n    animation-delay: 1.6s;\n  }\n  & [data-aos=\"logo__animation\"].aos-animate .logo-bar__item:nth-child(10) {\n    animation-delay: 1.8s;\n  }\n}\n",".background-media-text {\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  background: $colorLargeImageBg;\n}\n\n.background-media-text__image {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  z-index: 0;\n\n  & img {\n    object-fit: cover;\n    width: 100%;\n    height: 100%;\n  }\n}\n\n.background-media-text__inner {\n  position: absolute;\n  z-index: 2;\n  width: 100%;\n  height: 100%;\n}\n\n.background-media-text__aligner {\n  margin: $gutter;\n}\n\n.background-media-text__text {\n  text-align: center;\n  background: $colorBody;\n  padding: $gutter;\n  width: 430px;\n\n  [dir=\"rtl\"] & {\n    float: left;\n  }\n}\n\n.background-media-text__text .btn {\n  margin-top: calc($gutter / 2);\n}\n\n@media (--medium-up) {\n  .background-media-text--right .background-media-text__text {\n    float: right;\n\n    [dir=\"rtl\"] & {\n      float: right;\n    }\n  }\n}\n\n/*Section height*/\n@media (--small) {\n  .background-media-text {\n    position: relative;\n  }\n  .background-media-text__inner {\n    position: relative;\n  }\n  .background-media-text__image {\n    position: relative;\n    height: 240px;\n  }\n  .background-media-text__aligner {\n    margin: -20px 10px 10px;\n  }\n  .background-media-text__text {\n    padding: calc($gutter / 2);\n    width: auto;\n  }\n  .background-media-text.loading {\n    &:before,\n    &:after {\n      top: 117px;\n    }\n  }\n}\n\n[data-animate_images=\"true\"] {\n  & [data-aos=\"background-media-text__animation\"] .background-media-text__image,\n  & [data-aos=\"background-media-text__animation\"] .background-media-text__image svg {\n    opacity: 0.2;\n    transform: scale(1.06,1.06);\n\n    @nest .no-js & {\n      animation: none;\n      opacity: 1;\n    }\n  }\n\n  & [data-aos=\"background-media-text__animation\"].aos-animate .background-media-text__image,\n  & [data-aos=\"background-media-text__animation\"].aos-animate .background-media-text__image svg {\n    animation: fade-in-bg 1.5s cubic-bezier(0.26, 0.54, 0.32, 1) 0s forwards;\n    transition: none; /*fixes safari animation conflict*/\n  }\n}\n",".testimonials-slide {\n  display: none;\n  width: 100%;\n\n  @media (--medium-up) {\n    width: 33%;\n\n    @nest .testimonials-slider[data-count=\"2\"] & {\n      width: 50%;\n    }\n\n    @nest .testimonials-slider[data-count=\"1\"] & {\n      width: 80%;\n    }\n  }\n\n  /*Hide all but first slide to prevent page reflows prior to init*/\n  &:first-child {\n    display: block;\n  }\n\n  @nest .flickity-slider & {\n    display: block;\n    opacity: 1;\n  }\n}\n\n.testimonials-slider__text {\n  position: relative;\n  padding: 20px 0 calc($gutter * 1.5) 0;\n\n  & p {\n    font-size: 1.2em;\n    margin-bottom: calc($gutter / 4);\n\n    & + cite {\n      margin-top: 0;\n    }\n  }\n\n  & .quote-icon {\n    position: absolute;\n    top: 0;\n    left: 0;\n    opacity: 0.1;\n\n    @nest .text-center & {\n      left: 50%;\n      transform: translateX(-50%);\n    }\n\n    & svg {\n      width: 50px;\n      height: 50px;\n    }\n  }\n}\n\n/*Section image*/\n$testimonialImageSize: 80px;\n\n.testimonial-image {\n  max-width: $testimonialImageSize;\n  background-color: $colorBody;\n\n  @nest .text-center & {\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  & .image-wrap {\n    width: 100%;\n    height: 100%;\n  }\n}\n\n.testimonial-image--round {\n  width: $testimonialImageSize;\n  height: $testimonialImageSize;\n  max-width: none;\n  border-radius: $testimonialImageSize;\n\n  /*fix animation bug in Safari*/\n  & img {\n    overflow: hidden;\n    border-radius: $testimonialImageSize;\n    height: 100%;\n  }\n}\n\n.testimonials-section .flickity-page-dots {\n  bottom: 0;\n}\n\n\n@media (--medium-up) {\n  .testimonials-slider[data-count=\"1\"],\n  .testimonials-slider[data-count=\"2\"],\n  .testimonials-slider[data-count=\"3\"] {\n\n    & .flickity-viewport {\n      cursor: default;\n    }\n\n    & .flickity-page-dots {\n      display: none;\n    }\n  }\n}\n\n@media (--small) {\n  .testimonials-slider[data-count=\"1\"] {\n    & .flickity-viewport {\n      cursor: default;\n    }\n\n    & .flickity-page-dots {\n      display: none;\n    }\n  }\n}\n",".announcement {\n  position: relative;\n  overflow: hidden;\n  z-index: $zindexAnnouncement;\n}\n\n.announcement-bar-index-only--true {\n  display: none;\n\n  @nest .template-index & {\n    display: block;\n  }\n}\n\n.announcement__wrapper {\n  background-color: $colorAnnouncement;\n  color: $colorAnnouncementText;\n}\n\n/*One-off font styling*/\n.announcement__text {\n  font-size: 12px;\n  letter-spacing: 0.2em;\n  text-transform: uppercase;\n  display: block;\n  padding: 7px 20px 6px;\n  transition: opacity 0.75s ease;\n  text-align: center;\n}\n\n.announcement__link {\n  display: block;\n  color: $colorAnnouncementText;\n\n  &:hover {\n    color: $colorAnnouncementText;\n  }\n}\n\n/* Fix for submenu overlapping announcement bar */\n.shopify-section-group-header-group > .announcement {\n  z-index: calc($zindexNavDropdowns + 1);\n}\n",".shopify-challenge__container {\n  padding: 30px 22px;\n  @media (--medium-up) {\n    padding: 120px 0;\n  }\n}\n\n.newsletter {\n  margin: 0 auto;\n  max-width: 520px;\n}\n\n/*Space for title when inside a mobile popup*/\n@media (--small) {\n  .modal .newsletter .newsletter__title {\n    padding-right: 50px;\n  }\n}\n\n.newsletter-section .errors {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 520px;\n}\n\n.newsletter-form-group {\n  position: relative;\n  max-width: 400px;\n  margin: 0 auto;\n\n  @media (--small) {\n    max-width: 85%;\n\n    @nest .modal--newsletter & {\n      max-width: none;\n    }\n  }\n}\n\n.newsletter-form-group__input {\n  margin: 0 auto;\n  width: 100%;\n  border-bottom-color: currentColor;\n  border-radius: 0;\n  padding-right: 45px;\n\n  &:focus {\n    border-bottom-color: currentColor;\n  }\n}\n\n.newsletter-form-group__input::placeholder {\n  color: currentColor;\n  opacity: 1;\n}\n\n.newsletter-form-group__submit {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  color: currentColor;\n  padding-right: 0;\n\n  & .icon {\n    width: 26px;\n    height: 24px;\n  }\n}\n\n.newsletter-popup--text-left {\n  text-align: left;\n}\n\n.newsletter-popup .has-image {\n  padding: 0;\n\n  & .newsletter-popup__content-right {\n    flex-direction: row-reverse;\n  }\n}\n\n.newsletter-popup .modal__centered-content:not(.has-image) {\n  padding: 0;\n\n  @media (--small) {\n    padding: 20px;\n  }\n\n  & .newsletter-popup__content-info {\n    display: flex;\n    width: 100%;\n\n    @media (--small) {\n      display: block;\n    }\n  }\n\n  & .content__text {\n    flex: 1 0 0;\n    padding-right: 30px;\n\n    @media (--small) {\n      padding-right: 0;\n    }\n  }\n\n  & .content__form {\n    flex: 1 0 0;\n    padding-left: 30px;\n\n    @media (--small) {\n      padding-left: 0;\n    }\n  }\n}\n\n.newsletter-popup__content {\n  display: flex;\n\n  & .social-icons {\n    display: flex;\n    justify-content: center;\n  }\n\n  & .social-icons a {\n    display: inline-block;\n    margin-top: 30px;\n    padding: 5px;\n  }\n}\n\n.newsletter-popup__content-image-wrapper {\n  min-height: 200px;\n  width: 50%;\n  position: relative;\n\n  @media (--small) {\n    display: none;\n  }\n}\n\n.newsletter-popup__content-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  position: absolute;\n}\n\n.newsletter-popup__content-info {\n  padding: 40px;\n  width: 50%;\n\n  @media (--small) {\n    padding: 0 0 20px;\n    width: 100%;\n  }\n\n  & .h2 {\n    font-family: var(--typeHeaderPrimary),var(--typeHeaderFallback);\n    font-weight: var(--typeHeaderWeight);\n    margin-bottom: 0;\n\n    @media (--medium-up) {\n      margin-bottom: 0;\n    }\n  }\n\n  & .rte {\n    margin-top: 20px;\n    margin-bottom: 0;\n\n    @media (--medium-up) {\n      margin-top: 20px;\n      margin-bottom: 0;\n    }\n  }\n\n  & .popup-cta {\n    margin-top: 30px;\n    margin-bottom: 0;\n  }\n\n  & .newsletter__input-group {\n    margin-top: 30px;\n    margin-bottom: 0;\n\n    @media (--small) {\n      margin-top: 20px;\n      margin-bottom: 0;\n    }\n  }\n\n  & .newsletter-button {\n    max-width: 400px;\n  }\n}\n\nnewsletter-reminder {\n  color: var(--colorTextBody);\n  background-color: var(--colorBody);\n  border: 1px solid;\n  border-color: var(--colorTextBody);\n  left: 40px;\n  border-radius: var(--buttonRadius);\n  z-index: 19; /* Make sure it doesn't go above the menu */\n  transition: ease-in-out 0.15s bottom;\n\n  @media (--small) {\n    left: 20px;\n  }\n\n  &.modal--square .modal__close {\n    padding: 5px;\n    border: 1px solid;\n    border-color: var(--colorTextBody);\n    line-height: 0;\n    top: -10px;\n    right: -10px;\n    border-radius: var(--buttonRadius);\n    transition: 0.3s ease-in-out transform;\n\n    &:hover {\n      transform: scale(1.08);\n    }\n  }\n\n  & .newsletter-reminder__message {\n    font-size: calc(var(--typeHeaderSize)*0.5);\n  }\n}\n\n.sticky-nav--is-open newsletter-reminder {\n  bottom: 128px; /* 20px above menu */\n\n  @media (--small) {\n    bottom: 108px;\n  }\n}\n",".map-section {\n  position: relative;\n  height: 650px;\n  width: 100%;\n  overflow: hidden;\n\n  @media (--medium-up) {\n    height: 500px;\n  }\n\n  & .page-width {\n    height: 100%;\n  }\n}\n\n.map-section--load-error {\n  height: auto;\n}\n\n.map-onboarding {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  background-size: cover;\n  background-position: 50% 50%;\n  background-repeat: no-repeat;\n  z-index: 0;\n}\n\n.map-section__overlay-wrapper {\n  position: relative;\n  height: 100%;\n}\n\n.map-section__overlay {\n  position: relative;\n  display: inline-block;\n  background-color: $colorBody;\n  padding: $grid-gutter-small;\n  margin: $grid-gutter-small;\n  z-index: 3;\n\n  @media (--medium-up) {\n    position: absolute;\n    left: $gutter;\n    margin: $gutter;\n    padding: $gutter;\n    top: 50%;\n    transform: translateY(-50%);\n    margin-top: 0;\n    max-width: 430px;\n  }\n\n  @nest .map-section--load-error & {\n    position: static;\n    transform: translateY(0);\n  }\n}\n\n.map-section__link {\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 2;\n}\n\n/*Optically center map in visible area with\nextended height/widths and negative margins*/\n.map-section__container {\n  position: absolute !important; /*api will inline relative sometimes*/\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 150%;\n  margin-bottom: -50%;\n\n  @media (--medium-up) {\n    width: 130%;\n    height: 100%;\n    margin: 0 -30% 0 0;\n  }\n\n  @nest .display-map--false.bg-image--true &  {\n    width: 100%;\n    height: 100%;\n\n    & img {\n      object-fit: cover;\n      width: 100%;\n      height: 100%;\n    }\n  }\n}\n\n[data-animate_images=\"true\"] {\n  & [data-aos=\"map-section__animation\"] .map-section__container {\n    animation: fade-out 0.5s cubic-bezier(0.26, 0.54, 0.32, 1) 0s forwards;\n    will-change: opacity, transform;\n    opacity: 0;\n  }\n\n  & [data-aos=\"map-section__animation\"].aos-animate .map-section__container {\n    animation: fade-in 2.5s cubic-bezier(0.26, 0.54, 0.32, 1) 0s forwards;\n  }\n}\n",".social-section__wrapper {\n  background: #fff;\n  color: #000;\n  border: 1px solid;\n  border-color: var(--colorTextBodyAlpha01);\n\n  & a {\n    display: block;\n  }\n\n  & .placeholder-svg {\n    padding: 0;\n  }\n}\n\n.social-section__image-wrapper {\n  position: relative;\n  padding-bottom: 100%;\n}\n\n.social-section__image {\n  position: absolute;\n  object-fit: cover;\n  width: 100%;\n  height: 100%;\n}\n\n.social-section__meta {\n  padding: 9px;\n  font-size: 12px;\n  font-weight: normal;\n  font-family: sans-serif;\n  line-height: 1.4;\n\n  @media (--medium-up) {\n    font-size: 13px;\n    padding: 14px;\n  }\n}\n\n.social-section__caption {\n  & p {\n    display: inline;\n  }\n\n  @nest .social-section__likes + & {\n    margin-top: 10px;\n  }\n}\n\n.social-section__likes {\n  display: flex;\n  align-items: center;\n\n  &:before {\n    content: '';\n    display: inline-block;\n    height: 24px;\n    width: 24px;\n    margin-right: 10px;\n    background-repeat: no-repeat;\n    background-size: 24px;\n    background-image: url(data:image/gif;base64,R0lGODlhJgAmAPcAAO9GUv/8/P/+/v/9/e9HUfBIU//7++9GUfSEjPN5gveepPFeavecovBNWP719u9IU/329vnAxPm/xPBIUvvU1vrU2O9UX/WCi/BGUfzv8fWPlf3y8vBMWfqzuPWOlPmprfmvtfqwtvivtO9LVfNsdfFcZe9IUv309PJpcfFpcfWKk/JqdPvEyPJga/Jia/FOWPeepfVwefRye/3o6f/z9f3z9f719fN4gPNjbfzo6fvX2fJlbvFWYPrR1PaLlPJwevFRXPz0+PzU2P+6wO9MWe5GUfyur/eqsPJZYvR5gPmxtvqvtfvU1/3k5PaWnfX09fJvePimrPJsdvWSm/FSXfJqcvvQ0vmorv3u7viorfaRmPWVmvvd3/u4u//9/vrs8fJmb/m+wf3q7PejqPm8wPnFyPnCx/BKV/BLV+9PWPBRXPBQWe9PWe9LVvFcZvaKk+5KVvBdZvvU2PWDivFaZP3y8/R6g/m+w+9RXP/Q0/bv7/ve4PacovJrdfFeafFaZfFWYfro7vWEjf7s7Pvj5PBLVPFha/uvsu5HUfz2+fn5+fWMk/R0ff3f4vaNlfqjqf7u7/JXYv76+vBVYPrb3v/6+vebofNmcPq8wPnHyvifpfrAxPzh4/BGU//7/P3v8f3t7v3j5f349/R7gvrFyf319fvO0vNrdfzl5/i0ufzW2fJZZPvKzvBXYvaYoP3l6fBQWvzd3/aKkvR/hvemrfakqvBPWvFfaveaof7j5f7x8fBZZPaRl/WOlvFncfN0fPaTm//5+v739/vT1fWFjPmtsv3p6fN3gfBPW/JncPrIy/q6v+9RXfBHUvBHU+9HUv///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH/C1hNUCBEYXRhWE1QPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS4wLWMwNjAgNjEuMTM0Nzc3LCAyMDEwLzAyLzEyLTE3OjMyOjAwICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1IE1hY2ludG9zaCIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo3MzI1OThFNUFCQ0QxMUU5QUY3NDhFMDFCODlFN0ZDMyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDo3MzI1OThFNkFCQ0QxMUU5QUY3NDhFMDFCODlFN0ZDMyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjczMjU5OEUzQUJDRDExRTlBRjc0OEUwMUI4OUU3RkMzIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjczMjU5OEU0QUJDRDExRTlBRjc0OEUwMUI4OUU3RkMzIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+Af/+/fz7+vn49/b19PPy8fDv7u3s6+rp6Ofm5eTj4uHg397d3Nva2djX1tXU09LR0M/OzczLysnIx8bFxMPCwcC/vr28u7q5uLe2tbSzsrGwr66trKuqqainpqWko6KhoJ+enZybmpmYl5aVlJOSkZCPjo2Mi4qJiIeGhYSDgoGAf359fHt6eXh3dnV0c3JxcG9ubWxramloZ2ZlZGNiYWBfXl1cW1pZWFdWVVRTUlFQT05NTEtKSUhHRkVEQ0JBQD8+PTw7Ojk4NzY1NDMyMTAvLi0sKyopKCcmJSQjIiEgHx4dHBsaGRgXFhUUExIREA8ODQwLCgkIBwYFBAMCAQAAIfkEAAAAAAAsAAAAACYAJgAACP8AoQkcSLCgwYMIEypcyHCggBllskxZ1MuViDx6DDpgkoqBBhVaxkjgFCAhBBYefOFx1qxZIUBQGOgoKbBRrWN/0Dh7VsCWIQTLPh3cAAKFiWfOkiJF+uKGGU/QehAD8qxqs6Qtny1QkEMAQQhHkFgFUFUpy2cpSMlJMKHlTqVVATRjswXUwAERVj1zW7Wv250/Eowou3NvX8MNPiQSSOhUy2Z7syKFTPnBg8N7z1I2XGKYgAFXNi+FvLT02beQNZ817KNUhipLUcd+azU15qSFD1vYwwrOW81XC2fN3Xd1WcJVOzgZbdUsccksJafOjfXNJcO4d161GpswacpwU1//jcGhdOnH25OSJcsSq3ay01u6SJP772HJpjMjhVu8Ko4+cnVXXHDm1dbeZIedJQMMkR0nHHLQAaAdbf1VxYsQazxDVoMFPoiVYSDaZhUZNCSxF3uZBYdbfto9Rttmt6DixR1ErIbbY4bhmCB7xu2FwSOKQKMLAgekR1t70O23Ym3HSZGLQAJQkMxxtYkIImqy7SRXKxIMMFAAYcThl5a2oZdZi/w1w0wUDhQkyhJ0NLffmNHd5t4zyPAByUEnFOMGd9ohJ6df21GBixgJ1aDEAhPmiCSCz02iwCALBdEFGEX2hx9mhu1CCxYNVRIBCZ08eBVpkRXmjB8h1NGQQAYoeMMIAXXG15dcBOwwxBOvfmmFHQVklR5mRaywSTC9EjRABXO0gSN8kyHySyYGJGtQLLI0EBmqzRQwiik0WVtQE8Co4VdVZ1ygilfiHmSMJpEcBosjlLSr0BdGtEDAMzxY8oq9C9mAiSCzHBIIwAxJEgoXwiDssEIBAQA7);\n  }\n}\n\n.instagram-image {\n  display: block;\n  height: 0;\n  padding-bottom: 100%;\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n.instagram-image--error {\n  height: auto;\n  padding: 10px;\n  font-size: 13px;\n  text-align: center;\n  color: $errorRed;\n\n  & small {\n    word-break: break-word;\n    display: block;\n    font-size: 10px;\n  }\n}\n\n.instagram__product-title {\n  @mixin smallFontSize;\n  font-style: italic;\n  text-align: center;\n  padding: 5px;\n\n  & a {\n    display: inline;\n  }\n}\n",".store-availability {\n  display: flex;\n  justify-content: space-around;\n\n  & .icon {\n    margin: 6px 0 0;\n    width: 12px;\n    height: 12px;\n  }\n\n  & .icon-in-stock {\n    fill: $successGreen;\n  }\n\n  & .icon-out-of-stock {\n    fill: $errorRed;\n  }\n\n  & + .store-availability {\n    margin-top: 20px;\n  }\n}\n\n.store-availability__info {\n  flex: 0 1 90%;\n  text-align: left;\n  margin-left: 10px;\n\n  @nest html[dir=\"rtl\"] & {\n    text-align: right;\n    margin-left: 0;\n    margin-right: 10px;\n  }\n\n  & > div {\n    margin-bottom: 5px;\n\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n\n  & a {\n    text-decoration: underline;\n  }\n}\n\n.store-availability__small {\n  font-size: 0.8em;\n\n  & a {\n    display: block;\n    margin-top: 10px;\n  }\n}\n",".text-with-icons {\n  margin-bottom: -20px;\n\n  & .icon {\n    width: 80px;\n    height: 80px;\n  }\n\n  & .icon path,\n  & .icon polygon,\n  & .icon rect,\n  & .icon circle,\n  & .icon ellipse,\n  & .icon line,\n  & .icon polyline,\n  & .icon g {\n    stroke-width: 4px;\n  }\n}\n\n.text-with-icons__blocks .text-with-icons__block {\n  padding: 20px;\n\n  @media (--small) {\n    padding: 0 0 20px;\n  }\n}\n\n.text-with-icons__button {\n  padding-bottom: 20px;\n}\n",".countdown__content {\n  background-color: var(--countdown-background-color);\n  color: var(--countdown-text-color);\n\n  & h2,\n  & .h2 {\n    /* Theme design has h2 taking base font styles so we are overwriting it here */\n    @mixin headerFontStack;\n  }\n}\n\n.countdown__block--button {\n  & .btn.btn--inverse {\n    color: var(--accent-color);\n    border-color: var(--accent-color);\n  }\n}\n",".age-verification-popup {\n  top: 0;\n  bottom: 0;\n  flex-direction: column;\n\n  @media (--medium-up) {\n    flex-direction: row;\n  }\n\n  &.age-verification-popup--image-false {\n    background-color: var(--colorBody);\n\n    &.modal:before {\n      background-color: var(--colorBody);\n      animation: none;\n    }\n\n    & .modal__inner {\n      box-shadow: none;\n    }\n\n    &.modal--square .modal__centered-content {\n      box-shadow: none;\n    }\n  }\n\n  &.blur-image--true {\n    & .age-verification-popup__background-image,\n    & .age-verification-popup__mobile-image {\n      filter: blur(4px);\n      transform: scale(1.03);\n    }\n  }\n\n  &.modal--mobile-friendly .modal__inner {\n    border: none;\n    position: fixed;\n    bottom: 0;\n\n    @media (--medium-up) {\n      bottom: auto;\n      position: static;\n    }\n  }\n\n  &.modal--square .modal__centered-content {\n    padding: 40px;\n  }\n}\n\n.age-verification-popup__background-image-wrapper {\n  display: none !important; /* overwrites JS inline style so that the mobile image can be seen */\n\n  @media (--medium-up) {\n    display: block !important; /* overwrites JS inline style */\n  }\n}\n\n.age-verification-popup__mobile-image-wrapper {\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  top: 0;\n\n  @media (--medium-up) {\n    display: none;\n  }\n}\n\n.age-verification-popup__mobile-image {\n  height: 100%;\n\n  & img {\n    object-fit: cover;\n    height: 100%;\n  }\n}\n"]} */